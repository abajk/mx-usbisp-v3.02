
mx-usbisp-v3.02.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000fb2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000fb2  00001046  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000048  00800062  00800062  00001048  2**1
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001048  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001078  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000010b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000580  00000000  00000000  000010f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000476  00000000  00000000  00001678  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a36  00000000  00000000  00001aee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000017a  00000000  00000000  00002524  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	3b c0       	rjmp	.+118    	; 0x78 <__ctors_end>
   2:	d8 c0       	rjmp	.+432    	; 0x1b4 <__vector_1>
   4:	54 c0       	rjmp	.+168    	; 0xae <__bad_interrupt>
   6:	53 c0       	rjmp	.+166    	; 0xae <__bad_interrupt>
   8:	52 c0       	rjmp	.+164    	; 0xae <__bad_interrupt>
   a:	51 c0       	rjmp	.+162    	; 0xae <__bad_interrupt>
   c:	50 c0       	rjmp	.+160    	; 0xae <__bad_interrupt>
   e:	4f c0       	rjmp	.+158    	; 0xae <__bad_interrupt>
  10:	4e c0       	rjmp	.+156    	; 0xae <__bad_interrupt>
  12:	4d c0       	rjmp	.+154    	; 0xae <__bad_interrupt>
  14:	4c c0       	rjmp	.+152    	; 0xae <__bad_interrupt>
  16:	4b c0       	rjmp	.+150    	; 0xae <__bad_interrupt>
  18:	4a c0       	rjmp	.+148    	; 0xae <__bad_interrupt>
  1a:	49 c0       	rjmp	.+146    	; 0xae <__bad_interrupt>
  1c:	48 c0       	rjmp	.+144    	; 0xae <__bad_interrupt>
  1e:	47 c0       	rjmp	.+142    	; 0xae <__bad_interrupt>
  20:	46 c0       	rjmp	.+140    	; 0xae <__bad_interrupt>
  22:	45 c0       	rjmp	.+138    	; 0xae <__bad_interrupt>
  24:	44 c0       	rjmp	.+136    	; 0xae <__bad_interrupt>

00000026 <__trampolines_end>:
  26:	09 02       	muls	r16, r25
  28:	12 00       	.word	0x0012	; ????
  2a:	01 01       	movw	r0, r2
  2c:	00 80       	ld	r0, Z
  2e:	19 09       	sbc	r17, r9
  30:	04 00       	.word	0x0004	; ????
  32:	00 00       	nop
  34:	00 00       	nop
	...

00000038 <usbDescriptorDevice>:
  38:	12 01 10 01 ff 00 00 08 c0 16 dc 05 04 01 01 02     ................
  48:	00 01                                               ..

0000004a <usbDescriptorStringDevice>:
  4a:	0e 03 55 00 53 00 42 00 61 00 73 00 70 00           ..U.S.B.a.s.p.

00000058 <usbDescriptorStringVendor>:
  58:	1c 03 77 00 77 00 77 00 2e 00 66 00 69 00 73 00     ..w.w.w...f.i.s.
  68:	63 00 68 00 6c 00 2e 00 64 00 65 00                 c.h.l...d.e.

00000074 <usbDescriptorString0>:
  74:	04 03 09 04                                         ....

00000078 <__ctors_end>:
  78:	11 24       	eor	r1, r1
  7a:	1f be       	out	0x3f, r1	; 63
  7c:	cf e5       	ldi	r28, 0x5F	; 95
  7e:	d4 e0       	ldi	r29, 0x04	; 4
  80:	de bf       	out	0x3e, r29	; 62
  82:	cd bf       	out	0x3d, r28	; 61

00000084 <__do_copy_data>:
  84:	10 e0       	ldi	r17, 0x00	; 0
  86:	a0 e6       	ldi	r26, 0x60	; 96
  88:	b0 e0       	ldi	r27, 0x00	; 0
  8a:	e2 eb       	ldi	r30, 0xB2	; 178
  8c:	ff e0       	ldi	r31, 0x0F	; 15
  8e:	02 c0       	rjmp	.+4      	; 0x94 <__do_copy_data+0x10>
  90:	05 90       	lpm	r0, Z+
  92:	0d 92       	st	X+, r0
  94:	a2 36       	cpi	r26, 0x62	; 98
  96:	b1 07       	cpc	r27, r17
  98:	d9 f7       	brne	.-10     	; 0x90 <__do_copy_data+0xc>

0000009a <__do_clear_bss>:
  9a:	20 e0       	ldi	r18, 0x00	; 0
  9c:	a2 e6       	ldi	r26, 0x62	; 98
  9e:	b0 e0       	ldi	r27, 0x00	; 0
  a0:	01 c0       	rjmp	.+2      	; 0xa4 <.do_clear_bss_start>

000000a2 <.do_clear_bss_loop>:
  a2:	1d 92       	st	X+, r1

000000a4 <.do_clear_bss_start>:
  a4:	aa 3a       	cpi	r26, 0xAA	; 170
  a6:	b2 07       	cpc	r27, r18
  a8:	e1 f7       	brne	.-8      	; 0xa2 <.do_clear_bss_loop>
  aa:	53 d6       	rcall	.+3238   	; 0xd52 <main>
  ac:	80 c7       	rjmp	.+3840   	; 0xfae <_exit>

000000ae <__bad_interrupt>:
  ae:	a8 cf       	rjmp	.-176    	; 0x0 <__vectors>

000000b0 <tpi_init>:
 * TPI init
 */
.global tpi_init
tpi_init:
	/* CLK <= out */
	sbi _SFR_IO_ADDR(TPI_CLK_DDR), TPI_CLK_BIT
  b0:	bd 9a       	sbi	0x17, 5	; 23
	/* DATAOUT <= high */
	sbi _SFR_IO_ADDR(TPI_DATAOUT_DDR), TPI_DATAOUT_BIT
	sbi _SFR_IO_ADDR(TPI_DATAOUT_PORT), TPI_DATAOUT_BIT
#else
	/* DATA <= pull-up */
	cbi _SFR_IO_ADDR(TPI_DATAOUT_DDR), TPI_DATAOUT_BIT
  b2:	bb 98       	cbi	0x17, 3	; 23
	sbi _SFR_IO_ADDR(TPI_DATAOUT_PORT), TPI_DATAOUT_BIT
  b4:	c3 9a       	sbi	0x18, 3	; 24
#endif

	/* 32 bits */
	ldi r21, 32
  b6:	50 e2       	ldi	r21, 0x20	; 32
1:
		rcall tpi_bit_h
  b8:	17 d0       	rcall	.+46     	; 0xe8 <tpi_bit_h>
	dec r21
  ba:	5a 95       	dec	r21
	brne 1b
  bc:	e9 f7       	brne	.-6      	; 0xb8 <tpi_init+0x8>

	ret
  be:	08 95       	ret

000000c0 <tpi_pr_update>:
 * Update PR
 * in: r25:r24 <= PR
 * lost: r18-r21,r24,r30-r31
 */
tpi_pr_update:
	movw r20, r24
  c0:	ac 01       	movw	r20, r24
	ldi r24, TPI_OP_SSTPR(0)
  c2:	88 e6       	ldi	r24, 0x68	; 104
	rcall tpi_send_byte
  c4:	05 d0       	rcall	.+10     	; 0xd0 <tpi_send_byte>
	mov r24, r20
  c6:	84 2f       	mov	r24, r20
	rcall tpi_send_byte
  c8:	03 d0       	rcall	.+6      	; 0xd0 <tpi_send_byte>
	ldi r24, TPI_OP_SSTPR(1)
  ca:	89 e6       	ldi	r24, 0x69	; 105
	rcall tpi_send_byte
  cc:	01 d0       	rcall	.+2      	; 0xd0 <tpi_send_byte>
	mov r24, r21
  ce:	85 2f       	mov	r24, r21

000000d0 <tpi_send_byte>:
 * lost: r18-r19,r30-r31
 */
.global tpi_send_byte
tpi_send_byte:
	/* start bit */
	rcall tpi_bit_l
  d0:	0f d0       	rcall	.+30     	; 0xf0 <tpi_bit_l>
	/* 8 data bits */
	ldi r18, 8
  d2:	28 e0       	ldi	r18, 0x08	; 8
	ldi r19, 0
  d4:	30 e0       	ldi	r19, 0x00	; 0
1:
		// parity
		eor r19, r24
  d6:	38 27       	eor	r19, r24
		// get bit, shift
		bst r24, 0
  d8:	80 fb       	bst	r24, 0
		lsr r24
  da:	86 95       	lsr	r24
		// send
		rcall tpi_bit
  dc:	06 d0       	rcall	.+12     	; 0xea <tpi_bit>
	dec r18
  de:	2a 95       	dec	r18
	brne 1b
  e0:	d1 f7       	brne	.-12     	; 0xd6 <tpi_send_byte+0x6>
	/* parity bit */
	bst r19, 0
  e2:	30 fb       	bst	r19, 0
	rcall tpi_bit
  e4:	02 d0       	rcall	.+4      	; 0xea <tpi_bit>
	/* 2 stop bits */
	rcall tpi_bit_h
  e6:	00 d0       	rcall	.+0      	; 0xe8 <tpi_bit_h>

000000e8 <tpi_bit_h>:
 * in: T <= bit_in
 * out: T => bit_out
 * lost: r30-r31
 */
tpi_bit_h:
	set
  e8:	68 94       	set

000000ea <tpi_bit>:
1:
#else
	// DATAOUT = pull-up
	// if(T == 0)
	//   DATAOUT = low
	cbi _SFR_IO_ADDR(TPI_DATAOUT_DDR), TPI_DATAOUT_BIT
  ea:	bb 98       	cbi	0x17, 3	; 23
	sbi _SFR_IO_ADDR(TPI_DATAOUT_PORT), TPI_DATAOUT_BIT
  ec:	c3 9a       	sbi	0x18, 3	; 24
	brts 1f
  ee:	16 f0       	brts	.+4      	; 0xf4 <tpi_bit_l+0x4>

000000f0 <tpi_bit_l>:
tpi_bit_l:
		cbi _SFR_IO_ADDR(TPI_DATAOUT_PORT), TPI_DATAOUT_BIT
  f0:	c3 98       	cbi	0x18, 3	; 24
		sbi _SFR_IO_ADDR(TPI_DATAOUT_DDR), TPI_DATAOUT_BIT
  f2:	bb 9a       	sbi	0x17, 3	; 23
1:
#endif
	/* delay(); */
	lds r30, tpi_dly_cnt
  f4:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <tpi_dly_cnt>
	lds r31, tpi_dly_cnt+1
  f8:	f0 91 7f 00 	lds	r31, 0x007F	; 0x80007f <tpi_dly_cnt+0x1>
1:
		sbiw r30, 1
  fc:	31 97       	sbiw	r30, 0x01	; 1
	brsh 1b
  fe:	f0 f7       	brcc	.-4      	; 0xfc <tpi_bit_l+0xc>
	/* TPICLK = 1 */
	sbi _SFR_IO_ADDR(TPI_CLK_PORT), TPI_CLK_BIT
 100:	c5 9a       	sbi	0x18, 5	; 24
	/* T = TPIDATA */
	in r30, _SFR_IO_ADDR(TPI_DATAIN_PIN)
 102:	e6 b3       	in	r30, 0x16	; 22
	bst r30, TPI_DATAIN_BIT
 104:	e3 fb       	bst	r30, 3
	/* delay(); */
	lds r30, tpi_dly_cnt
 106:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <tpi_dly_cnt>
	lds r31, tpi_dly_cnt+1
 10a:	f0 91 7f 00 	lds	r31, 0x007F	; 0x80007f <tpi_dly_cnt+0x1>
1:
		sbiw r30, 1
 10e:	31 97       	sbiw	r30, 0x01	; 1
	brsh 1b
 110:	f0 f7       	brcc	.-4      	; 0x10e <tpi_bit_l+0x1e>

	/* TPICLK = 0 */
	cbi _SFR_IO_ADDR(TPI_CLK_PORT), TPI_CLK_BIT
 112:	c5 98       	cbi	0x18, 5	; 24
	ret
 114:	08 95       	ret

00000116 <tpi_recv_byte>:
 * lost: r18-r19,r30-r31
 */
.global tpi_recv_byte
tpi_recv_byte:
	/* waitfor(start_bit, 192); */
	ldi r18, 192
 116:	20 ec       	ldi	r18, 0xC0	; 192
1:
		rcall tpi_bit_h
 118:	e7 df       	rcall	.-50     	; 0xe8 <tpi_bit_h>
		brtc .tpi_recv_found_start
 11a:	46 f4       	brtc	.+16     	; 0x12c <.tpi_recv_found_start>
	dec r18
 11c:	2a 95       	dec	r18
	brne 1b
 11e:	e1 f7       	brne	.-8      	; 0x118 <tpi_recv_byte+0x2>

00000120 <.tpi_break_ret0>:
	/* no start bit: set return value */
.tpi_break_ret0:
	ldi r24, 0
 120:	80 e0       	ldi	r24, 0x00	; 0
	/* send 2 breaks (24++ bits) */
	ldi r18, 26
 122:	2a e1       	ldi	r18, 0x1A	; 26
1:
		rcall tpi_bit_l
 124:	e5 df       	rcall	.-54     	; 0xf0 <tpi_bit_l>
	dec r18
 126:	2a 95       	dec	r18
	brne 1b
 128:	e9 f7       	brne	.-6      	; 0x124 <.tpi_break_ret0+0x4>
	/* send hi */
	rjmp tpi_bit_h
 12a:	de cf       	rjmp	.-68     	; 0xe8 <tpi_bit_h>

0000012c <.tpi_recv_found_start>:
	
// ----
.tpi_recv_found_start:
	/* recv 8bits(+calc.parity) */
	ldi r18, 8
 12c:	28 e0       	ldi	r18, 0x08	; 8
	ldi r19, 0
 12e:	30 e0       	ldi	r19, 0x00	; 0
1:
		rcall tpi_bit_h
 130:	db df       	rcall	.-74     	; 0xe8 <tpi_bit_h>
		lsr r24
 132:	86 95       	lsr	r24
		bld r24, 7
 134:	87 f9       	bld	r24, 7
		eor r19, r24
 136:	38 27       	eor	r19, r24
	dec r18
 138:	2a 95       	dec	r18
	brne 1b
 13a:	d1 f7       	brne	.-12     	; 0x130 <.tpi_recv_found_start+0x4>
	/* recv parity */
	rcall tpi_bit_h
 13c:	d5 df       	rcall	.-86     	; 0xe8 <tpi_bit_h>
	bld r18, 7
 13e:	27 f9       	bld	r18, 7
	eor r19, r18
 140:	32 27       	eor	r19, r18
	brmi .tpi_break_ret0
 142:	72 f3       	brmi	.-36     	; 0x120 <.tpi_break_ret0>
	/* recv stop bits */
	rcall tpi_bit_h
 144:	d1 df       	rcall	.-94     	; 0xe8 <tpi_bit_h>
	rjmp tpi_bit_h
 146:	d0 cf       	rjmp	.-96     	; 0xe8 <tpi_bit_h>

00000148 <tpi_read_block>:
 * Read Block
 */
.global tpi_read_block
tpi_read_block:
	// X <= dptr
	movw XL, r22
 148:	db 01       	movw	r26, r22
	// r23 <= len
	mov r23, r20
 14a:	74 2f       	mov	r23, r20
	/* set PR */
	rcall tpi_pr_update
 14c:	b9 df       	rcall	.-142    	; 0xc0 <tpi_pr_update>

0000014e <.tpi_read_loop>:
	/* read data */	
.tpi_read_loop:
		ldi r24, TPI_OP_SLD_INC
 14e:	84 e2       	ldi	r24, 0x24	; 36
		rcall tpi_send_byte
 150:	bf df       	rcall	.-130    	; 0xd0 <tpi_send_byte>
		rcall tpi_recv_byte
 152:	e1 df       	rcall	.-62     	; 0x116 <tpi_recv_byte>
		st X+, r24
 154:	8d 93       	st	X+, r24
	dec r23
 156:	7a 95       	dec	r23
	brne .tpi_read_loop
 158:	d1 f7       	brne	.-12     	; 0x14e <.tpi_read_loop>
	ret
 15a:	08 95       	ret

0000015c <tpi_write_block>:
 * Write block
 */
.global tpi_write_block
tpi_write_block:
	// X <= sptr
	movw XL, r22
 15c:	db 01       	movw	r26, r22
	// r23 <= len
	mov r23, r20
 15e:	74 2f       	mov	r23, r20
	/* set PR */
	rcall tpi_pr_update
 160:	af df       	rcall	.-162    	; 0xc0 <tpi_pr_update>

00000162 <.tpi_write_loop>:
	/* write data */
.tpi_write_loop:
		ldi r24, TPI_OP_SOUT(NVMCMD)
 162:	83 ef       	ldi	r24, 0xF3	; 243
		rcall tpi_send_byte
 164:	b5 df       	rcall	.-150    	; 0xd0 <tpi_send_byte>
		ldi r24, NVMCMD_WORD_WRITE
 166:	8d e1       	ldi	r24, 0x1D	; 29
		rcall tpi_send_byte
 168:	b3 df       	rcall	.-154    	; 0xd0 <tpi_send_byte>
		ldi r24, TPI_OP_SST_INC
 16a:	84 e6       	ldi	r24, 0x64	; 100
		rcall tpi_send_byte
 16c:	b1 df       	rcall	.-158    	; 0xd0 <tpi_send_byte>
		ld r24, X+
 16e:	8d 91       	ld	r24, X+
		rcall tpi_send_byte
 170:	af df       	rcall	.-162    	; 0xd0 <tpi_send_byte>

00000172 <.tpi_nvmbsy_wait>:
.tpi_nvmbsy_wait:
			ldi r24, TPI_OP_SIN(NVMCSR)
 172:	82 e7       	ldi	r24, 0x72	; 114
			rcall tpi_send_byte
 174:	ad df       	rcall	.-166    	; 0xd0 <tpi_send_byte>
			rcall tpi_recv_byte
 176:	cf df       	rcall	.-98     	; 0x116 <tpi_recv_byte>
			andi r24, NVMCSR_BSY
 178:	80 78       	andi	r24, 0x80	; 128
		brne .tpi_nvmbsy_wait
 17a:	d9 f7       	brne	.-10     	; 0x172 <.tpi_nvmbsy_wait>
	dec r23
 17c:	7a 95       	dec	r23
	brne .tpi_write_loop
 17e:	89 f7       	brne	.-30     	; 0x162 <.tpi_write_loop>
	ret
 180:	08 95       	ret

00000182 <usbCrc16>:
;   poly    r20+r21
;   scratch r23
;   resCrc  r24+r25 / r16+r17
;   ptr     X / Z
usbCrc16:
    mov     ptrL, argPtrL
 182:	a8 2f       	mov	r26, r24
    mov     ptrH, argPtrH
 184:	b9 2f       	mov	r27, r25
    ldi     resCrcL, 0
 186:	80 e0       	ldi	r24, 0x00	; 0
    ldi     resCrcH, 0
 188:	90 e0       	ldi	r25, 0x00	; 0
    ldi     polyL, lo8(0xa001)
 18a:	41 e0       	ldi	r20, 0x01	; 1
    ldi     polyH, hi8(0xa001)
 18c:	50 ea       	ldi	r21, 0xA0	; 160
    com     argLen      ; argLen = -argLen - 1: modified loop to ensure that carry is set
 18e:	60 95       	com	r22
    ldi     bitCnt, 0   ; loop counter with starnd condition = end condition
 190:	30 e0       	ldi	r19, 0x00	; 0
    rjmp    usbCrcLoopEntry
 192:	09 c0       	rjmp	.+18     	; 0x1a6 <usbCrcLoopEntry>

00000194 <usbCrcByteLoop>:
usbCrcByteLoop:
    ld      byte, ptr+
 194:	2d 91       	ld	r18, X+
    eor     resCrcL, byte
 196:	82 27       	eor	r24, r18

00000198 <usbCrcBitLoop>:
usbCrcBitLoop:
    ror     resCrcH     ; carry is always set here (see brcs jumps to here)
 198:	97 95       	ror	r25
    ror     resCrcL
 19a:	87 95       	ror	r24
    brcs    usbCrcNoXor
 19c:	10 f0       	brcs	.+4      	; 0x1a2 <usbCrcNoXor>
    eor     resCrcL, polyL
 19e:	84 27       	eor	r24, r20
    eor     resCrcH, polyH
 1a0:	95 27       	eor	r25, r21

000001a2 <usbCrcNoXor>:
usbCrcNoXor:
    subi    bitCnt, 224 ; (8 * 224) % 256 = 0; this loop iterates 8 times
 1a2:	30 5e       	subi	r19, 0xE0	; 224
    brcs    usbCrcBitLoop
 1a4:	c8 f3       	brcs	.-14     	; 0x198 <usbCrcBitLoop>

000001a6 <usbCrcLoopEntry>:
usbCrcLoopEntry:
    subi    argLen, -1
 1a6:	6f 5f       	subi	r22, 0xFF	; 255
    brcs    usbCrcByteLoop
 1a8:	a8 f3       	brcs	.-22     	; 0x194 <usbCrcByteLoop>

000001aa <usbCrcReady>:
usbCrcReady:
    ret
 1aa:	08 95       	ret

000001ac <usbCrc16Append>:

#endif /* USB_USE_FAST_CRC */

; extern unsigned usbCrc16Append(unsigned char *data, unsigned char len);
usbCrc16Append:
    rcall   usbCrc16
 1ac:	ea df       	rcall	.-44     	; 0x182 <usbCrc16>
    st      ptr+, resCrcL
 1ae:	8d 93       	st	X+, r24
    st      ptr+, resCrcH
 1b0:	9d 93       	st	X+, r25
    ret
 1b2:	08 95       	ret

000001b4 <__vector_1>:
;max allowable interrupt latency: 34 cycles -> max 25 cycles interrupt disable
;max stack usage: [ret(2), YL, SREG, YH, shift, x1, x2, x3, cnt, x4] = 11 bytes
;Numbers in brackets are maximum cycles since SOF.
USB_INTR_VECTOR:
;order of registers pushed: YL, SREG [sofError], YH, shift, x1, x2, x3, cnt
    push    YL              ;2 [35] push only what is necessary to sync with edge ASAP
 1b4:	cf 93       	push	r28
    in      YL, SREG        ;1 [37]
 1b6:	cf b7       	in	r28, 0x3f	; 63
    push    YL              ;2 [39]
 1b8:	cf 93       	push	r28

000001ba <waitForJ>:
;sync up with J to K edge during sync pattern -- use fastest possible loops
;The first part waits at most 1 bit long since we must be in sync pattern.
;YL is guarenteed to be < 0x80 because I flag is clear. When we jump to
;waitForJ, ensure that this prerequisite is met.
waitForJ:
    inc     YL
 1ba:	c3 95       	inc	r28
    sbis    USBIN, USBMINUS
 1bc:	b0 9b       	sbis	0x16, 0	; 22
    brne    waitForJ        ; just make sure we have ANY timeout
 1be:	e9 f7       	brne	.-6      	; 0x1ba <waitForJ>

000001c0 <waitForK>:
waitForK:
;The following code results in a sampling window of 1/4 bit which meets the spec.
    sbis    USBIN, USBMINUS
 1c0:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    foundK
 1c2:	09 c0       	rjmp	.+18     	; 0x1d6 <foundK>
    sbis    USBIN, USBMINUS
 1c4:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    foundK
 1c6:	07 c0       	rjmp	.+14     	; 0x1d6 <foundK>
    sbis    USBIN, USBMINUS
 1c8:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    foundK
 1ca:	05 c0       	rjmp	.+10     	; 0x1d6 <foundK>
    sbis    USBIN, USBMINUS
 1cc:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    foundK
 1ce:	03 c0       	rjmp	.+6      	; 0x1d6 <foundK>
    sbis    USBIN, USBMINUS
 1d0:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    foundK
 1d2:	01 c0       	rjmp	.+2      	; 0x1d6 <foundK>
    sts     usbSofCount, YL
#endif  /* USB_COUNT_SOF */
#ifdef USB_SOF_HOOK
    USB_SOF_HOOK
#endif
    rjmp    sofError
 1d4:	a1 c0       	rjmp	.+322    	; 0x318 <sofError>

000001d6 <foundK>:
foundK:
;{3, 5} after falling D- edge, average delay: 4 cycles [we want 4 for center sampling]
;we have 1 bit time for setup purposes, then sample again. Numbers in brackets
;are cycles from center of first sync (double K) bit after the instruction
    push    YH                  ;2 [2]
 1d6:	df 93       	push	r29
    lds     YL, usbInputBufOffset;2 [4]
 1d8:	c0 91 8d 00 	lds	r28, 0x008D	; 0x80008d <usbInputBufOffset>
    clr     YH                  ;1 [5]
 1dc:	dd 27       	eor	r29, r29
    subi    YL, lo8(-(usbRxBuf));1 [6]
 1de:	cc 56       	subi	r28, 0x6C	; 108
    sbci    YH, hi8(-(usbRxBuf));1 [7]
 1e0:	df 4f       	sbci	r29, 0xFF	; 255

    sbis    USBIN, USBMINUS ;1 [8] we want two bits K [sample 1 cycle too early]
 1e2:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    haveTwoBitsK    ;2 [10]
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <haveTwoBitsK>
    pop     YH              ;2 [11] undo the push from before
 1e6:	df 91       	pop	r29
    rjmp    waitForK        ;2 [13] this was not the end of sync, retry
 1e8:	eb cf       	rjmp	.-42     	; 0x1c0 <waitForK>

000001ea <haveTwoBitsK>:
haveTwoBitsK:
;----------------------------------------------------------------------------
; push more registers and initialize values while we sample the first bits:
;----------------------------------------------------------------------------
    push    shift           ;2 [16]
 1ea:	2f 93       	push	r18
    push    x1              ;2 [12]
 1ec:	0f 93       	push	r16
    push    x2              ;2 [14]
 1ee:	1f 93       	push	r17

    in      x1, USBIN       ;1 [17] <-- sample bit 0
 1f0:	06 b3       	in	r16, 0x16	; 22
    ldi     shift, 0xff     ;1 [18]
 1f2:	2f ef       	ldi	r18, 0xFF	; 255
    bst     x1, USBMINUS    ;1 [19]
 1f4:	00 fb       	bst	r16, 0
    bld     shift, 0        ;1 [20]
 1f6:	20 f9       	bld	r18, 0
    push    x3              ;2 [22]
 1f8:	4f 93       	push	r20
    push    cnt             ;2 [24]
 1fa:	3f 93       	push	r19
    
    in      x2, USBIN       ;1 [25] <-- sample bit 1
 1fc:	16 b3       	in	r17, 0x16	; 22
    ser     x3              ;1 [26] [inserted init instruction]
 1fe:	4f ef       	ldi	r20, 0xFF	; 255
    eor     x1, x2          ;1 [27]
 200:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;1 [28]
 202:	00 fb       	bst	r16, 0
    bld     shift, 1        ;1 [29]
 204:	21 f9       	bld	r18, 1
    ldi     cnt, USB_BUFSIZE;1 [30] [inserted init instruction]
 206:	3b e0       	ldi	r19, 0x0B	; 11
    rjmp    rxbit2          ;2 [32]
 208:	31 c0       	rjmp	.+98     	; 0x26c <rxbit2>

0000020a <unstuff0>:
;----------------------------------------------------------------------------
; Receiver loop (numbers in brackets are cycles within byte after instr)
;----------------------------------------------------------------------------

unstuff0:               ;1 (branch taken)
    andi    x3, ~0x01   ;1 [15]
 20a:	4e 7f       	andi	r20, 0xFE	; 254
    mov     x1, x2      ;1 [16] x2 contains last sampled (stuffed) bit
 20c:	01 2f       	mov	r16, r17
    in      x2, USBIN   ;1 [17] <-- sample bit 1 again
 20e:	16 b3       	in	r17, 0x16	; 22
    ori     shift, 0x01 ;1 [18]
 210:	21 60       	ori	r18, 0x01	; 1
    rjmp    didUnstuff0 ;2 [20]
 212:	28 c0       	rjmp	.+80     	; 0x264 <didUnstuff0>

00000214 <unstuff1>:

unstuff1:               ;1 (branch taken)
    mov     x2, x1      ;1 [21] x1 contains last sampled (stuffed) bit
 214:	10 2f       	mov	r17, r16
    andi    x3, ~0x02   ;1 [22]
 216:	4d 7f       	andi	r20, 0xFD	; 253
    ori     shift, 0x02 ;1 [23]
 218:	22 60       	ori	r18, 0x02	; 2
    nop                 ;1 [24]
 21a:	00 00       	nop
    in      x1, USBIN   ;1 [25] <-- sample bit 2 again
 21c:	06 b3       	in	r16, 0x16	; 22
    rjmp    didUnstuff1 ;2 [27]
 21e:	29 c0       	rjmp	.+82     	; 0x272 <didUnstuff1>

00000220 <unstuff2>:

unstuff2:               ;1 (branch taken)
    andi    x3, ~0x04   ;1 [29]
 220:	4b 7f       	andi	r20, 0xFB	; 251
    ori     shift, 0x04 ;1 [30]
 222:	24 60       	ori	r18, 0x04	; 4
    mov     x1, x2      ;1 [31] x2 contains last sampled (stuffed) bit
 224:	01 2f       	mov	r16, r17
    nop                 ;1 [32]
 226:	00 00       	nop
    in      x2, USBIN   ;1 [33] <-- sample bit 3
 228:	16 b3       	in	r17, 0x16	; 22
    rjmp    didUnstuff2 ;2 [35]
 22a:	2b c0       	rjmp	.+86     	; 0x282 <didUnstuff2>

0000022c <unstuff3>:

unstuff3:               ;1 (branch taken)
    in      x2, USBIN   ;1 [34] <-- sample stuffed bit 3 [one cycle too late]
 22c:	16 b3       	in	r17, 0x16	; 22
    andi    x3, ~0x08   ;1 [35]
 22e:	47 7f       	andi	r20, 0xF7	; 247
    ori     shift, 0x08 ;1 [36]
 230:	28 60       	ori	r18, 0x08	; 8
    rjmp    didUnstuff3 ;2 [38]
 232:	2a c0       	rjmp	.+84     	; 0x288 <didUnstuff3>

00000234 <unstuff4>:

unstuff4:               ;1 (branch taken)
    andi    x3, ~0x10   ;1 [40]
 234:	4f 7e       	andi	r20, 0xEF	; 239
    in      x1, USBIN   ;1 [41] <-- sample stuffed bit 4
 236:	06 b3       	in	r16, 0x16	; 22
    ori     shift, 0x10 ;1 [42]
 238:	20 61       	ori	r18, 0x10	; 16
    rjmp    didUnstuff4 ;2 [44]
 23a:	2c c0       	rjmp	.+88     	; 0x294 <didUnstuff4>

0000023c <unstuff5>:

unstuff5:               ;1 (branch taken)
    andi    x3, ~0x20   ;1 [48]
 23c:	4f 7d       	andi	r20, 0xDF	; 223
    in      x2, USBIN   ;1 [49] <-- sample stuffed bit 5
 23e:	16 b3       	in	r17, 0x16	; 22
    ori     shift, 0x20 ;1 [50]
 240:	20 62       	ori	r18, 0x20	; 32
    rjmp    didUnstuff5 ;2 [52]
 242:	2f c0       	rjmp	.+94     	; 0x2a2 <didUnstuff5>

00000244 <unstuff6>:

unstuff6:               ;1 (branch taken)
    andi    x3, ~0x40   ;1 [56]
 244:	4f 7b       	andi	r20, 0xBF	; 191
    in      x1, USBIN   ;1 [57] <-- sample stuffed bit 6
 246:	06 b3       	in	r16, 0x16	; 22
    ori     shift, 0x40 ;1 [58]
 248:	20 64       	ori	r18, 0x40	; 64
    rjmp    didUnstuff6 ;2 [60]
 24a:	32 c0       	rjmp	.+100    	; 0x2b0 <didUnstuff6>

0000024c <rxLoop>:
; bit 4:    none
; bit 5:    none
; bit 6:    none
; bit 7:    jump, eor
rxLoop:
    eor     x3, shift   ;1 [0] reconstruct: x3 is 0 at bit locations we changed, 1 at others
 24c:	42 27       	eor	r20, r18
    in      x1, USBIN   ;1 [1] <-- sample bit 0
 24e:	06 b3       	in	r16, 0x16	; 22
    st      y+, x3      ;2 [3] store data
 250:	49 93       	st	Y+, r20
    ser     x3          ;1 [4]
 252:	4f ef       	ldi	r20, 0xFF	; 255
    nop                 ;1 [5]
 254:	00 00       	nop
    eor     x2, x1      ;1 [6]
 256:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [7]
 258:	10 fb       	bst	r17, 0
    bld     shift, 0    ;1 [8]
 25a:	20 f9       	bld	r18, 0
    in      x2, USBIN   ;1 [9] <-- sample bit 1 (or possibly bit 0 stuffed)
 25c:	16 b3       	in	r17, 0x16	; 22
    andi    x2, USBMASK ;1 [10]
 25e:	13 70       	andi	r17, 0x03	; 3
    breq    se0         ;1 [11] SE0 check for bit 1
 260:	c9 f1       	breq	.+114    	; 0x2d4 <se0>
    andi    shift, 0xf9 ;1 [12]
 262:	29 7f       	andi	r18, 0xF9	; 249

00000264 <didUnstuff0>:
didUnstuff0:
    breq    unstuff0    ;1 [13]
 264:	91 f2       	breq	.-92     	; 0x20a <unstuff0>
    eor     x1, x2      ;1 [14]
 266:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [15]
 268:	00 fb       	bst	r16, 0
    bld     shift, 1    ;1 [16]
 26a:	21 f9       	bld	r18, 1

0000026c <rxbit2>:
rxbit2:
    in      x1, USBIN   ;1 [17] <-- sample bit 2 (or possibly bit 1 stuffed)
 26c:	06 b3       	in	r16, 0x16	; 22
    andi    shift, 0xf3 ;1 [18]
 26e:	23 7f       	andi	r18, 0xF3	; 243
    breq    unstuff1    ;1 [19] do remaining work for bit 1
 270:	89 f2       	breq	.-94     	; 0x214 <unstuff1>

00000272 <didUnstuff1>:
didUnstuff1:
    subi    cnt, 1      ;1 [20]
 272:	31 50       	subi	r19, 0x01	; 1
    brcs    overflow    ;1 [21] loop control
 274:	58 f1       	brcs	.+86     	; 0x2cc <overflow>
    eor     x2, x1      ;1 [22]
 276:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [23]
 278:	10 fb       	bst	r17, 0
    bld     shift, 2    ;1 [24]
 27a:	22 f9       	bld	r18, 2
    in      x2, USBIN   ;1 [25] <-- sample bit 3 (or possibly bit 2 stuffed)
 27c:	16 b3       	in	r17, 0x16	; 22
    andi    shift, 0xe7 ;1 [26]
 27e:	27 7e       	andi	r18, 0xE7	; 231
    breq    unstuff2    ;1 [27]
 280:	79 f2       	breq	.-98     	; 0x220 <unstuff2>

00000282 <didUnstuff2>:
didUnstuff2:
    eor     x1, x2      ;1 [28]
 282:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [29]
 284:	00 fb       	bst	r16, 0
    bld     shift, 3    ;1 [30]
 286:	23 f9       	bld	r18, 3

00000288 <didUnstuff3>:
didUnstuff3:
    andi    shift, 0xcf ;1 [31]
 288:	2f 7c       	andi	r18, 0xCF	; 207
    breq    unstuff3    ;1 [32]
 28a:	81 f2       	breq	.-96     	; 0x22c <unstuff3>
    in      x1, USBIN   ;1 [33] <-- sample bit 4
 28c:	06 b3       	in	r16, 0x16	; 22
    eor     x2, x1      ;1 [34]
 28e:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [35]
 290:	10 fb       	bst	r17, 0
    bld     shift, 4    ;1 [36]
 292:	24 f9       	bld	r18, 4

00000294 <didUnstuff4>:
didUnstuff4:
    andi    shift, 0x9f ;1 [37]
 294:	2f 79       	andi	r18, 0x9F	; 159
    breq    unstuff4    ;1 [38]
 296:	71 f2       	breq	.-100    	; 0x234 <unstuff4>
    nop2                ;2 [40]
 298:	00 c0       	rjmp	.+0      	; 0x29a <didUnstuff4+0x6>
    in      x2, USBIN   ;1 [41] <-- sample bit 5
 29a:	16 b3       	in	r17, 0x16	; 22
    eor     x1, x2      ;1 [42]
 29c:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [43]
 29e:	00 fb       	bst	r16, 0
    bld     shift, 5    ;1 [44]
 2a0:	25 f9       	bld	r18, 5

000002a2 <didUnstuff5>:
didUnstuff5:
    andi    shift, 0x3f ;1 [45]
 2a2:	2f 73       	andi	r18, 0x3F	; 63
    breq    unstuff5    ;1 [46]
 2a4:	59 f2       	breq	.-106    	; 0x23c <unstuff5>
    nop2                ;2 [48]
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <didUnstuff5+0x6>
    in      x1, USBIN   ;1 [49] <-- sample bit 6
 2a8:	06 b3       	in	r16, 0x16	; 22
    eor     x2, x1      ;1 [50]
 2aa:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [51]
 2ac:	10 fb       	bst	r17, 0
    bld     shift, 6    ;1 [52]
 2ae:	26 f9       	bld	r18, 6

000002b0 <didUnstuff6>:
didUnstuff6:
    cpi     shift, 0x02 ;1 [53]
 2b0:	22 30       	cpi	r18, 0x02	; 2
    brlo    unstuff6    ;1 [54]
 2b2:	40 f2       	brcs	.-112    	; 0x244 <unstuff6>
    nop2                ;2 [56]
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <didUnstuff6+0x6>
    in      x2, USBIN   ;1 [57] <-- sample bit 7
 2b6:	16 b3       	in	r17, 0x16	; 22
    eor     x1, x2      ;1 [58]
 2b8:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [59]
 2ba:	00 fb       	bst	r16, 0
    bld     shift, 7    ;1 [60]
 2bc:	27 f9       	bld	r18, 7

000002be <didUnstuff7>:
didUnstuff7:
    cpi     shift, 0x04 ;1 [61]
 2be:	24 30       	cpi	r18, 0x04	; 4
    brsh    rxLoop      ;2 [63] loop control
 2c0:	28 f6       	brcc	.-118    	; 0x24c <rxLoop>

000002c2 <unstuff7>:
unstuff7:
    andi    x3, ~0x80   ;1 [63]
 2c2:	4f 77       	andi	r20, 0x7F	; 127
    ori     shift, 0x80 ;1 [64]
 2c4:	20 68       	ori	r18, 0x80	; 128
    in      x2, USBIN   ;1 [65] <-- sample stuffed bit 7
 2c6:	16 b3       	in	r17, 0x16	; 22
    nop                 ;1 [66]
 2c8:	00 00       	nop
    rjmp    didUnstuff7 ;2 [68]
 2ca:	f9 cf       	rjmp	.-14     	; 0x2be <didUnstuff7>

000002cc <overflow>:
*/

#define token   x1

overflow:
    ldi     x2, 1<<USB_INTR_PENDING_BIT
 2cc:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ; clear any pending interrupts
 2ce:	1a bf       	out	0x3a, r17	; 58

000002d0 <ignorePacket>:
ignorePacket:
    clr     token
 2d0:	00 27       	eor	r16, r16
    rjmp    storeTokenAndReturn
 2d2:	17 c0       	rjmp	.+46     	; 0x302 <handleSetupOrOut>

000002d4 <se0>:
; Processing of received packet (numbers in brackets are cycles after center of SE0)
;----------------------------------------------------------------------------
;This is the only non-error exit point for the software receiver loop
;we don't check any CRCs here because there is no time left.
se0:
    subi    cnt, USB_BUFSIZE    ;[5]
 2d4:	3b 50       	subi	r19, 0x0B	; 11
    neg     cnt                 ;[6]
 2d6:	31 95       	neg	r19
    sub     YL, cnt             ;[7]
 2d8:	c3 1b       	sub	r28, r19
    sbci    YH, 0               ;[8]
 2da:	d0 40       	sbci	r29, 0x00	; 0
    ldi     x2, 1<<USB_INTR_PENDING_BIT ;[9]
 2dc:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ;[10] clear pending intr and check flag later. SE0 should be over.
 2de:	1a bf       	out	0x3a, r17	; 58
    ld      token, y            ;[11]
 2e0:	08 81       	ld	r16, Y
    cpi     token, USBPID_DATA0 ;[13]
 2e2:	03 3c       	cpi	r16, 0xC3	; 195
    breq    handleData          ;[14]
 2e4:	e9 f0       	breq	.+58     	; 0x320 <handleData>
    cpi     token, USBPID_DATA1 ;[15]
 2e6:	0b 34       	cpi	r16, 0x4B	; 75
    breq    handleData          ;[16]
 2e8:	d9 f0       	breq	.+54     	; 0x320 <handleData>
    lds     shift, usbDeviceAddr;[17]
 2ea:	20 91 8b 00 	lds	r18, 0x008B	; 0x80008b <usbDeviceAddr>
    ldd     x2, y+1             ;[19] ADDR and 1 bit endpoint number
 2ee:	19 81       	ldd	r17, Y+1	; 0x01
    lsl     x2                  ;[21] shift out 1 bit endpoint number
 2f0:	11 0f       	add	r17, r17
    cpse    x2, shift           ;[22]
 2f2:	12 13       	cpse	r17, r18
    rjmp    ignorePacket        ;[23]
 2f4:	ed cf       	rjmp	.-38     	; 0x2d0 <ignorePacket>
/* only compute endpoint number in x3 if required later */
#if USB_CFG_HAVE_INTRIN_ENDPOINT || USB_CFG_IMPLEMENT_FN_WRITEOUT
    ldd     x3, y+2             ;[24] endpoint number + crc
    rol     x3                  ;[26] shift in LSB of endpoint
#endif
    cpi     token, USBPID_IN    ;[27]
 2f6:	09 36       	cpi	r16, 0x69	; 105
    breq    handleIn            ;[28]
 2f8:	41 f1       	breq	.+80     	; 0x34a <handleIn>
    cpi     token, USBPID_SETUP ;[29]
 2fa:	0d 32       	cpi	r16, 0x2D	; 45
    breq    handleSetupOrOut    ;[30]
 2fc:	11 f0       	breq	.+4      	; 0x302 <handleSetupOrOut>
    cpi     token, USBPID_OUT   ;[31]
 2fe:	01 3e       	cpi	r16, 0xE1	; 225
    brne    ignorePacket        ;[32] must be ack, nak or whatever
 300:	39 f7       	brne	.-50     	; 0x2d0 <ignorePacket>

00000302 <handleSetupOrOut>:
    andi    x3, 0xf             ;[32]
    breq    storeTokenAndReturn ;[33]
    mov     token, x3           ;[34] indicate that this is endpoint x OUT
#endif
storeTokenAndReturn:
    sts     usbCurrentTok, token;[35]
 302:	00 93 92 00 	sts	0x0092, r16	; 0x800092 <usbCurrentTok>

00000306 <doReturn>:
doReturn:
    POP_STANDARD                ;[37] 12...16 cycles
 306:	3f 91       	pop	r19
 308:	4f 91       	pop	r20
 30a:	1f 91       	pop	r17
 30c:	0f 91       	pop	r16
 30e:	2f 91       	pop	r18
 310:	df 91       	pop	r29
    USB_LOAD_PENDING(YL)        ;[49]
 312:	ca b7       	in	r28, 0x3a	; 58
    sbrc    YL, USB_INTR_PENDING_BIT;[50] check whether data is already arriving
 314:	c6 fd       	sbrc	r28, 6
    rjmp    waitForJ            ;[51] save the pops and pushes -- a new interrupt is already pending
 316:	51 cf       	rjmp	.-350    	; 0x1ba <waitForJ>

00000318 <sofError>:
sofError:
    POP_RETI                    ;macro call
 318:	cf 91       	pop	r28
 31a:	cf bf       	out	0x3f, r28	; 63
 31c:	cf 91       	pop	r28
    reti
 31e:	18 95       	reti

00000320 <handleData>:

handleData:
#if USB_CFG_CHECK_CRC
    CRC_CLEANUP_AND_CHECK       ; jumps to ignorePacket if CRC error
#endif
    lds     shift, usbCurrentTok;[18]
 320:	20 91 92 00 	lds	r18, 0x0092	; 0x800092 <usbCurrentTok>
    tst     shift               ;[20]
 324:	22 23       	and	r18, r18
    breq    doReturn            ;[21]
 326:	79 f3       	breq	.-34     	; 0x306 <doReturn>
    lds     x2, usbRxLen        ;[22]
 328:	10 91 90 00 	lds	r17, 0x0090	; 0x800090 <usbRxLen>
    tst     x2                  ;[24]
 32c:	11 23       	and	r17, r17
    brne    sendNakAndReti      ;[25]
 32e:	11 f5       	brne	.+68     	; 0x374 <sendNakAndReti>
; 2006-03-11: The following two lines fix a problem where the device was not
; recognized if usbPoll() was called less frequently than once every 4 ms.
    cpi     cnt, 4              ;[26] zero sized data packets are status phase only -- ignore and ack
 330:	34 30       	cpi	r19, 0x04	; 4
    brmi    sendAckAndReti      ;[27] keep rx buffer clean -- we must not NAK next SETUP
 332:	12 f1       	brmi	.+68     	; 0x378 <sendAckAndReti>
#if USB_CFG_CHECK_DATA_TOGGLING
    sts     usbCurrentDataToken, token  ; store for checking by C code
#endif
    sts     usbRxLen, cnt       ;[28] store received data, swap buffers
 334:	30 93 90 00 	sts	0x0090, r19	; 0x800090 <usbRxLen>
    sts     usbRxToken, shift   ;[30]
 338:	20 93 8c 00 	sts	0x008C, r18	; 0x80008c <usbRxToken>
    lds     x2, usbInputBufOffset;[32] swap buffers
 33c:	10 91 8d 00 	lds	r17, 0x008D	; 0x80008d <usbInputBufOffset>
    ldi     cnt, USB_BUFSIZE    ;[34]
 340:	3b e0       	ldi	r19, 0x0B	; 11
    sub     cnt, x2             ;[35]
 342:	31 1b       	sub	r19, r17
    sts     usbInputBufOffset, cnt;[36] buffers now swapped
 344:	30 93 8d 00 	sts	0x008D, r19	; 0x80008d <usbInputBufOffset>
    rjmp    sendAckAndReti      ;[38] 40 + 17 = 57 until SOP
 348:	17 c0       	rjmp	.+46     	; 0x378 <sendAckAndReti>

0000034a <handleIn>:

handleIn:
;We don't send any data as long as the C code has not processed the current
;input data and potentially updated the output data. That's more efficient
;in terms of code size than clearing the tx buffers when a packet is received.
    lds     x1, usbRxLen        ;[30]
 34a:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <usbRxLen>
    cpi     x1, 1               ;[32] negative values are flow control, 0 means "buffer free"
 34e:	01 30       	cpi	r16, 0x01	; 1
    brge    sendNakAndReti      ;[33] unprocessed input packet?
 350:	8c f4       	brge	.+34     	; 0x374 <sendNakAndReti>
    ldi     x1, USBPID_NAK      ;[34] prepare value for usbTxLen
 352:	0a e5       	ldi	r16, 0x5A	; 90
    brne    sendNakAndReti      ;[36]
#else
    brne    handleIn1           ;[36]
#endif
#endif
    lds     cnt, usbTxLen       ;[37]
 354:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <usbTxLen>
    sbrc    cnt, 4              ;[39] all handshake tokens have bit 4 set
 358:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[40] 42 + 16 = 58 until SOP
 35a:	10 c0       	rjmp	.+32     	; 0x37c <sendCntAndReti>
    sts     usbTxLen, x1        ;[41] x1 == USBPID_NAK from above
 35c:	00 93 61 00 	sts	0x0061, r16	; 0x800061 <usbTxLen>
    ldi     YL, lo8(usbTxBuf)   ;[43]
 360:	c0 e8       	ldi	r28, 0x80	; 128
    ldi     YH, hi8(usbTxBuf)   ;[44]
 362:	d0 e0       	ldi	r29, 0x00	; 0
    rjmp    usbSendAndReti      ;[45] 57 + 12 = 59 until SOP
 364:	0f c0       	rjmp	.+30     	; 0x384 <usbSendAndReti>

00000366 <stuffN1Delay>:
;----------------------------------------------------------------------------

txByteLoop:
txBitloop:
stuffN1Delay:                   ;     [03]
    ror     shift               ;[-5] [11] [59]
 366:	27 95       	ror	r18
    brcc    doExorN1            ;[-4]      [60]
 368:	a8 f4       	brcc	.+42     	; 0x394 <doExorN1>
    subi    x4, 1               ;[-3]
 36a:	51 50       	subi	r21, 0x01	; 1
    brne    commonN1            ;[-2]
 36c:	a9 f4       	brne	.+42     	; 0x398 <commonN1>
    lsl     shift               ;[-1] compensate ror after rjmp stuffDelay
 36e:	22 0f       	add	r18, r18
    nop                         ;[00] stuffing consists of just waiting 8 cycles
 370:	00 00       	nop
    rjmp    stuffN1Delay        ;[01] after ror, C bit is reliably clear
 372:	f9 cf       	rjmp	.-14     	; 0x366 <stuffN1Delay>

00000374 <sendNakAndReti>:

sendNakAndReti:                 ;0 [-19] 19 cycles until SOP
    ldi     x3, USBPID_NAK      ;1 [-18]
 374:	4a e5       	ldi	r20, 0x5A	; 90
    rjmp    usbSendX3           ;2 [-16]
 376:	03 c0       	rjmp	.+6      	; 0x37e <usbSendX3>

00000378 <sendAckAndReti>:
sendAckAndReti:                 ;0 [-19] 19 cycles until SOP
    ldi     x3, USBPID_ACK      ;1 [-18]
 378:	42 ed       	ldi	r20, 0xD2	; 210
    rjmp    usbSendX3           ;2 [-16]
 37a:	01 c0       	rjmp	.+2      	; 0x37e <usbSendX3>

0000037c <sendCntAndReti>:
sendCntAndReti:                 ;0 [-17] 17 cycles until SOP
    mov     x3, cnt             ;1 [-16]
 37c:	43 2f       	mov	r20, r19

0000037e <usbSendX3>:
usbSendX3:                      ;0 [-16]
    ldi     YL, 20              ;1 [-15] 'x3' is R20
 37e:	c4 e1       	ldi	r28, 0x14	; 20
    ldi     YH, 0               ;1 [-14]
 380:	d0 e0       	ldi	r29, 0x00	; 0
    ldi     cnt, 2              ;1 [-13]
 382:	32 e0       	ldi	r19, 0x02	; 2

00000384 <usbSendAndReti>:
;pointer to data in 'Y'
;number of bytes in 'cnt' -- including sync byte
;uses: x1...x2, x4, shift, cnt, Y [x1 = mirror USBOUT, x2 = USBMASK, x4 = bitstuff cnt]
;Numbers in brackets are time since first bit of sync pattern is sent (start of instruction)
usbSendAndReti:
    in      x2, USBDDR          ;[-12] 12 cycles until SOP
 384:	17 b3       	in	r17, 0x17	; 23
    ori     x2, USBMASK         ;[-11]
 386:	13 60       	ori	r17, 0x03	; 3
    sbi     USBOUT, USBMINUS    ;[-10] prepare idle state; D+ and D- must have been 0 (no pullups)
 388:	c0 9a       	sbi	0x18, 0	; 24
    out     USBDDR, x2          ;[-8] <--- acquire bus
 38a:	17 bb       	out	0x17, r17	; 23
    in      x1, USBOUT          ;[-7] port mirror for tx loop
 38c:	08 b3       	in	r16, 0x18	; 24
    ldi     shift, 0x40         ;[-6] sync byte is first byte sent (we enter loop after ror)
 38e:	20 e4       	ldi	r18, 0x40	; 64
    ldi     x2, USBMASK         ;[-5]
 390:	13 e0       	ldi	r17, 0x03	; 3
    push    x4                  ;[-4]
 392:	5f 93       	push	r21

00000394 <doExorN1>:
doExorN1:
    eor     x1, x2              ;[-2] [06] [62]
 394:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[-1] [07] [63]
 396:	56 e0       	ldi	r21, 0x06	; 6

00000398 <commonN1>:
commonN1:
stuffN2Delay:
    out     USBOUT, x1          ;[00] [08] [64] <--- set bit
 398:	08 bb       	out	0x18, r16	; 24
    ror     shift               ;[01]
 39a:	27 95       	ror	r18
    brcc    doExorN2            ;[02]
 39c:	20 f4       	brcc	.+8      	; 0x3a6 <doExorN2>
    subi    x4, 1               ;[03]
 39e:	51 50       	subi	r21, 0x01	; 1
    brne    commonN2            ;[04]
 3a0:	21 f4       	brne	.+8      	; 0x3aa <commonN2>
    lsl     shift               ;[05] compensate ror after rjmp stuffDelay
 3a2:	22 0f       	add	r18, r18
    rjmp    stuffN2Delay        ;[06] after ror, C bit is reliably clear
 3a4:	f9 cf       	rjmp	.-14     	; 0x398 <commonN1>

000003a6 <doExorN2>:
doExorN2:
    eor     x1, x2              ;[04] [12]
 3a6:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[05] [13]
 3a8:	56 e0       	ldi	r21, 0x06	; 6

000003aa <commonN2>:
commonN2:
    nop                         ;[06] [14]
 3aa:	00 00       	nop
    subi    cnt, 171            ;[07] [15] trick: (3 * 171) & 0xff = 1
 3ac:	3b 5a       	subi	r19, 0xAB	; 171
    out     USBOUT, x1          ;[08] [16] <--- set bit
 3ae:	08 bb       	out	0x18, r16	; 24
    brcs    txBitloop           ;[09]      [25] [41]
 3b0:	d0 f2       	brcs	.-76     	; 0x366 <stuffN1Delay>

000003b2 <stuff6Delay>:

stuff6Delay:
    ror     shift               ;[42] [50]
 3b2:	27 95       	ror	r18
    brcc    doExor6             ;[43]
 3b4:	28 f4       	brcc	.+10     	; 0x3c0 <doExor6>
    subi    x4, 1               ;[44]
 3b6:	51 50       	subi	r21, 0x01	; 1
    brne    common6             ;[45]
 3b8:	29 f4       	brne	.+10     	; 0x3c4 <common6>
    lsl     shift               ;[46] compensate ror after rjmp stuffDelay
 3ba:	22 0f       	add	r18, r18
    nop                         ;[47] stuffing consists of just waiting 8 cycles
 3bc:	00 00       	nop
    rjmp    stuff6Delay         ;[48] after ror, C bit is reliably clear
 3be:	f9 cf       	rjmp	.-14     	; 0x3b2 <stuff6Delay>

000003c0 <doExor6>:
doExor6:
    eor     x1, x2              ;[45] [53]
 3c0:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[46]
 3c2:	56 e0       	ldi	r21, 0x06	; 6

000003c4 <common6>:
common6:
stuff7Delay:
    ror     shift               ;[47] [55]
 3c4:	27 95       	ror	r18
    out     USBOUT, x1          ;[48] <--- set bit
 3c6:	08 bb       	out	0x18, r16	; 24
    brcc    doExor7             ;[49]
 3c8:	20 f4       	brcc	.+8      	; 0x3d2 <doExor7>
    subi    x4, 1               ;[50]
 3ca:	51 50       	subi	r21, 0x01	; 1
    brne    common7             ;[51]
 3cc:	21 f4       	brne	.+8      	; 0x3d6 <common7>
    lsl     shift               ;[52] compensate ror after rjmp stuffDelay
 3ce:	22 0f       	add	r18, r18
    rjmp    stuff7Delay         ;[53] after ror, C bit is reliably clear
 3d0:	f9 cf       	rjmp	.-14     	; 0x3c4 <common6>

000003d2 <doExor7>:
doExor7:
    eor     x1, x2              ;[51] [59]
 3d2:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[52]
 3d4:	56 e0       	ldi	r21, 0x06	; 6

000003d6 <common7>:
common7:
    ld      shift, y+           ;[53]
 3d6:	29 91       	ld	r18, Y+
    tst     cnt                 ;[55]
 3d8:	33 23       	and	r19, r19
    out     USBOUT, x1          ;[56] <--- set bit
 3da:	08 bb       	out	0x18, r16	; 24
    brne    txByteLoop          ;[57]
 3dc:	21 f6       	brne	.-120    	; 0x366 <stuffN1Delay>

;make SE0:
    cbr     x1, USBMASK         ;[58] prepare SE0 [spec says EOP may be 15 to 18 cycles]
 3de:	0c 7f       	andi	r16, 0xFC	; 252
    lds     x2, usbNewDeviceAddr;[59]
 3e0:	10 91 91 00 	lds	r17, 0x0091	; 0x800091 <usbNewDeviceAddr>
    lsl     x2                  ;[61] we compare with left shifted address
 3e4:	11 0f       	add	r17, r17
    subi    YL, 2 + 20          ;[62] Only assign address on data packets, not ACK/NAK in x3
 3e6:	c6 51       	subi	r28, 0x16	; 22
    sbci    YH, 0               ;[63]
 3e8:	d0 40       	sbci	r29, 0x00	; 0
    out     USBOUT, x1          ;[00] <-- out SE0 -- from now 2 bits = 16 cycles until bus idle
 3ea:	08 bb       	out	0x18, r16	; 24
;2006-03-06: moved transfer of new address to usbDeviceAddr from C-Code to asm:
;set address only after data packet was sent, not after handshake
    breq    skipAddrAssign      ;[01]
 3ec:	11 f0       	breq	.+4      	; 0x3f2 <skipAddrAssign>
    sts     usbDeviceAddr, x2   ; if not skipped: SE0 is one cycle longer
 3ee:	10 93 8b 00 	sts	0x008B, r17	; 0x80008b <usbDeviceAddr>

000003f2 <skipAddrAssign>:
skipAddrAssign:
;end of usbDeviceAddress transfer
    ldi     x2, 1<<USB_INTR_PENDING_BIT;[03] int0 occurred during TX -- clear pending flag
 3f2:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ;[04]
 3f4:	1a bf       	out	0x3a, r17	; 58
    ori     x1, USBIDLE         ;[05]
 3f6:	01 60       	ori	r16, 0x01	; 1
    in      x2, USBDDR          ;[06]
 3f8:	17 b3       	in	r17, 0x17	; 23
    cbr     x2, USBMASK         ;[07] set both pins to input
 3fa:	1c 7f       	andi	r17, 0xFC	; 252
    mov     x3, x1              ;[08]
 3fc:	40 2f       	mov	r20, r16
    cbr     x3, USBMASK         ;[09] configure no pullup on both pins
 3fe:	4c 7f       	andi	r20, 0xFC	; 252
    pop     x4                  ;[10]
 400:	5f 91       	pop	r21
    nop2                        ;[12]
 402:	00 c0       	rjmp	.+0      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
    nop2                        ;[14]
 404:	00 c0       	rjmp	.+0      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
    out     USBOUT, x1          ;[16] <-- out J (idle) -- end of SE0 (EOP signal)
 406:	08 bb       	out	0x18, r16	; 24
    out     USBDDR, x2          ;[17] <-- release bus now
 408:	17 bb       	out	0x17, r17	; 23
    out     USBOUT, x3          ;[18] <-- ensure no pull-up resistors are active
 40a:	48 bb       	out	0x18, r20	; 24
    rjmp    doReturn
 40c:	7c cf       	rjmp	.-264    	; 0x306 <doReturn>

0000040e <clockWait>:
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	98 17       	cp	r25, r24
 412:	39 f0       	breq	.+14     	; 0x422 <clockWait+0x14>
 414:	32 b7       	in	r19, 0x32	; 50
 416:	22 b7       	in	r18, 0x32	; 50
 418:	23 1b       	sub	r18, r19
 41a:	2c 33       	cpi	r18, 0x3C	; 60
 41c:	e0 f3       	brcs	.-8      	; 0x416 <clockWait+0x8>
 41e:	9f 5f       	subi	r25, 0xFF	; 255
 420:	f7 cf       	rjmp	.-18     	; 0x410 <clockWait+0x2>
 422:	08 95       	ret

00000424 <ispTransmit_hw>:
 424:	8f b9       	out	0x0f, r24	; 15
 426:	77 9b       	sbis	0x0e, 7	; 14
 428:	fe cf       	rjmp	.-4      	; 0x426 <ispTransmit_hw+0x2>
 42a:	8f b1       	in	r24, 0x0f	; 15
 42c:	08 95       	ret

0000042e <ispUpdateExtended>:
 42e:	dc 01       	movw	r26, r24
 430:	cb 01       	movw	r24, r22
 432:	21 e1       	ldi	r18, 0x11	; 17
 434:	b6 95       	lsr	r27
 436:	a7 95       	ror	r26
 438:	97 95       	ror	r25
 43a:	87 95       	ror	r24
 43c:	2a 95       	dec	r18
 43e:	d1 f7       	brne	.-12     	; 0x434 <ispUpdateExtended+0x6>
 440:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <isp_hiaddr>
 444:	28 17       	cp	r18, r24
 446:	d9 f0       	breq	.+54     	; 0x47e <__stack+0x1f>
 448:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <isp_hiaddr>
 44c:	e0 91 79 00 	lds	r30, 0x0079	; 0x800079 <ispTransmit>
 450:	f0 91 7a 00 	lds	r31, 0x007A	; 0x80007a <ispTransmit+0x1>
 454:	8d e4       	ldi	r24, 0x4D	; 77
 456:	09 95       	icall
 458:	e0 91 79 00 	lds	r30, 0x0079	; 0x800079 <ispTransmit>
 45c:	f0 91 7a 00 	lds	r31, 0x007A	; 0x80007a <ispTransmit+0x1>
 460:	80 e0       	ldi	r24, 0x00	; 0
 462:	09 95       	icall
 464:	e0 91 79 00 	lds	r30, 0x0079	; 0x800079 <ispTransmit>
 468:	f0 91 7a 00 	lds	r31, 0x007A	; 0x80007a <ispTransmit+0x1>
 46c:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <isp_hiaddr>
 470:	09 95       	icall
 472:	e0 91 79 00 	lds	r30, 0x0079	; 0x800079 <ispTransmit>
 476:	f0 91 7a 00 	lds	r31, 0x007A	; 0x80007a <ispTransmit+0x1>
 47a:	80 e0       	ldi	r24, 0x00	; 0
 47c:	09 94       	ijmp
 47e:	08 95       	ret

00000480 <spiHWenable>:
 480:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <sck_spcr>
 484:	8d b9       	out	0x0d, r24	; 13
 486:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <sck_spsr>
 48a:	8e b9       	out	0x0e, r24	; 14
 48c:	08 95       	ret

0000048e <ispSetSCKOption>:
 48e:	88 23       	and	r24, r24
 490:	19 f0       	breq	.+6      	; 0x498 <ispSetSCKOption+0xa>
 492:	88 30       	cpi	r24, 0x08	; 8
 494:	40 f1       	brcs	.+80     	; 0x4e6 <ispSetSCKOption+0x58>
 496:	01 c0       	rjmp	.+2      	; 0x49a <ispSetSCKOption+0xc>
 498:	8a e0       	ldi	r24, 0x0A	; 10
 49a:	22 e1       	ldi	r18, 0x12	; 18
 49c:	32 e0       	ldi	r19, 0x02	; 2
 49e:	30 93 7a 00 	sts	0x007A, r19	; 0x80007a <ispTransmit+0x1>
 4a2:	20 93 79 00 	sts	0x0079, r18	; 0x800079 <ispTransmit>
 4a6:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <sck_spsr>
 4aa:	91 e0       	ldi	r25, 0x01	; 1
 4ac:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <sck_sw_delay>
 4b0:	89 30       	cpi	r24, 0x09	; 9
 4b2:	99 f0       	breq	.+38     	; 0x4da <ispSetSCKOption+0x4c>
 4b4:	18 f4       	brcc	.+6      	; 0x4bc <ispSetSCKOption+0x2e>
 4b6:	88 30       	cpi	r24, 0x08	; 8
 4b8:	91 f0       	breq	.+36     	; 0x4de <ispSetSCKOption+0x50>
 4ba:	08 c0       	rjmp	.+16     	; 0x4cc <ispSetSCKOption+0x3e>
 4bc:	8b 30       	cpi	r24, 0x0B	; 11
 4be:	21 f0       	breq	.+8      	; 0x4c8 <ispSetSCKOption+0x3a>
 4c0:	8c 30       	cpi	r24, 0x0C	; 12
 4c2:	21 f4       	brne	.+8      	; 0x4cc <ispSetSCKOption+0x3e>
 4c4:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <sck_spsr>
 4c8:	81 e5       	ldi	r24, 0x51	; 81
 4ca:	0a c0       	rjmp	.+20     	; 0x4e0 <ispSetSCKOption+0x52>
 4cc:	82 e5       	ldi	r24, 0x52	; 82
 4ce:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <sck_spcr>
 4d2:	81 e0       	ldi	r24, 0x01	; 1
 4d4:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <sck_spsr>
 4d8:	08 95       	ret
 4da:	82 e5       	ldi	r24, 0x52	; 82
 4dc:	01 c0       	rjmp	.+2      	; 0x4e0 <ispSetSCKOption+0x52>
 4de:	83 e5       	ldi	r24, 0x53	; 83
 4e0:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <sck_spcr>
 4e4:	08 95       	ret
 4e6:	2b e9       	ldi	r18, 0x9B	; 155
 4e8:	32 e0       	ldi	r19, 0x02	; 2
 4ea:	30 93 7a 00 	sts	0x007A, r19	; 0x80007a <ispTransmit+0x1>
 4ee:	20 93 79 00 	sts	0x0079, r18	; 0x800079 <ispTransmit>
 4f2:	84 30       	cpi	r24, 0x04	; 4
 4f4:	81 f0       	breq	.+32     	; 0x516 <ispSetSCKOption+0x88>
 4f6:	30 f4       	brcc	.+12     	; 0x504 <ispSetSCKOption+0x76>
 4f8:	82 30       	cpi	r24, 0x02	; 2
 4fa:	79 f0       	breq	.+30     	; 0x51a <ispSetSCKOption+0x8c>
 4fc:	83 30       	cpi	r24, 0x03	; 3
 4fe:	79 f4       	brne	.+30     	; 0x51e <ispSetSCKOption+0x90>
 500:	80 e3       	ldi	r24, 0x30	; 48
 502:	0e c0       	rjmp	.+28     	; 0x520 <ispSetSCKOption+0x92>
 504:	86 30       	cpi	r24, 0x06	; 6
 506:	61 f0       	breq	.+24     	; 0x520 <ispSetSCKOption+0x92>
 508:	20 f0       	brcs	.+8      	; 0x512 <ispSetSCKOption+0x84>
 50a:	87 30       	cpi	r24, 0x07	; 7
 50c:	41 f4       	brne	.+16     	; 0x51e <ispSetSCKOption+0x90>
 50e:	83 e0       	ldi	r24, 0x03	; 3
 510:	07 c0       	rjmp	.+14     	; 0x520 <ispSetSCKOption+0x92>
 512:	8c e0       	ldi	r24, 0x0C	; 12
 514:	05 c0       	rjmp	.+10     	; 0x520 <ispSetSCKOption+0x92>
 516:	88 e1       	ldi	r24, 0x18	; 24
 518:	03 c0       	rjmp	.+6      	; 0x520 <ispSetSCKOption+0x92>
 51a:	80 e6       	ldi	r24, 0x60	; 96
 51c:	01 c0       	rjmp	.+2      	; 0x520 <ispSetSCKOption+0x92>
 51e:	80 ec       	ldi	r24, 0xC0	; 192
 520:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <sck_sw_delay>
 524:	08 95       	ret

00000526 <ispDelay>:
 526:	22 b7       	in	r18, 0x32	; 50
 528:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <sck_sw_delay>
 52c:	82 b7       	in	r24, 0x32	; 50
 52e:	82 1b       	sub	r24, r18
 530:	89 17       	cp	r24, r25
 532:	e0 f3       	brcs	.-8      	; 0x52c <ispDelay+0x6>
 534:	08 95       	ret

00000536 <ispTransmit_sw>:
 536:	1f 93       	push	r17
 538:	cf 93       	push	r28
 53a:	df 93       	push	r29
 53c:	18 2f       	mov	r17, r24
 53e:	d8 e0       	ldi	r29, 0x08	; 8
 540:	c0 e0       	ldi	r28, 0x00	; 0
 542:	17 ff       	sbrs	r17, 7
 544:	02 c0       	rjmp	.+4      	; 0x54a <ispTransmit_sw+0x14>
 546:	c3 9a       	sbi	0x18, 3	; 24
 548:	01 c0       	rjmp	.+2      	; 0x54c <ispTransmit_sw+0x16>
 54a:	c3 98       	cbi	0x18, 3	; 24
 54c:	11 0f       	add	r17, r17
 54e:	cc 0f       	add	r28, r28
 550:	b4 99       	sbic	0x16, 4	; 22
 552:	cf 5f       	subi	r28, 0xFF	; 255
 554:	c5 9a       	sbi	0x18, 5	; 24
 556:	e7 df       	rcall	.-50     	; 0x526 <ispDelay>
 558:	c5 98       	cbi	0x18, 5	; 24
 55a:	e5 df       	rcall	.-54     	; 0x526 <ispDelay>
 55c:	d1 50       	subi	r29, 0x01	; 1
 55e:	89 f7       	brne	.-30     	; 0x542 <ispTransmit_sw+0xc>
 560:	8c 2f       	mov	r24, r28
 562:	df 91       	pop	r29
 564:	cf 91       	pop	r28
 566:	1f 91       	pop	r17
 568:	08 95       	ret

0000056a <ispConnect>:
 56a:	87 b3       	in	r24, 0x17	; 23
 56c:	8c 62       	ori	r24, 0x2C	; 44
 56e:	87 bb       	out	0x17, r24	; 23
 570:	c2 98       	cbi	0x18, 2	; 24
 572:	c5 98       	cbi	0x18, 5	; 24
 574:	d8 df       	rcall	.-80     	; 0x526 <ispDelay>
 576:	c2 9a       	sbi	0x18, 2	; 24
 578:	d6 df       	rcall	.-84     	; 0x526 <ispDelay>
 57a:	c2 98       	cbi	0x18, 2	; 24
 57c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <ispTransmit>
 580:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <ispTransmit+0x1>
 584:	82 51       	subi	r24, 0x12	; 18
 586:	92 40       	sbci	r25, 0x02	; 2
 588:	09 f4       	brne	.+2      	; 0x58c <ispConnect+0x22>
 58a:	7a df       	rcall	.-268    	; 0x480 <spiHWenable>
 58c:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <isp_hiaddr>
 590:	08 95       	ret

00000592 <ispDisconnect>:
 592:	87 b3       	in	r24, 0x17	; 23
 594:	83 7d       	andi	r24, 0xD3	; 211
 596:	87 bb       	out	0x17, r24	; 23
 598:	88 b3       	in	r24, 0x18	; 24
 59a:	83 7d       	andi	r24, 0xD3	; 211
 59c:	88 bb       	out	0x18, r24	; 24
 59e:	1d b8       	out	0x0d, r1	; 13
 5a0:	08 95       	ret

000005a2 <ispEnterProgrammingMode>:
 5a2:	cf 93       	push	r28
 5a4:	df 93       	push	r29
 5a6:	c1 e2       	ldi	r28, 0x21	; 33
 5a8:	c1 50       	subi	r28, 0x01	; 1
 5aa:	51 f1       	breq	.+84     	; 0x600 <ispEnterProgrammingMode+0x5e>
 5ac:	e0 91 79 00 	lds	r30, 0x0079	; 0x800079 <ispTransmit>
 5b0:	f0 91 7a 00 	lds	r31, 0x007A	; 0x80007a <ispTransmit+0x1>
 5b4:	8c ea       	ldi	r24, 0xAC	; 172
 5b6:	09 95       	icall
 5b8:	e0 91 79 00 	lds	r30, 0x0079	; 0x800079 <ispTransmit>
 5bc:	f0 91 7a 00 	lds	r31, 0x007A	; 0x80007a <ispTransmit+0x1>
 5c0:	83 e5       	ldi	r24, 0x53	; 83
 5c2:	09 95       	icall
 5c4:	e0 91 79 00 	lds	r30, 0x0079	; 0x800079 <ispTransmit>
 5c8:	f0 91 7a 00 	lds	r31, 0x007A	; 0x80007a <ispTransmit+0x1>
 5cc:	80 e0       	ldi	r24, 0x00	; 0
 5ce:	09 95       	icall
 5d0:	d8 2f       	mov	r29, r24
 5d2:	e0 91 79 00 	lds	r30, 0x0079	; 0x800079 <ispTransmit>
 5d6:	f0 91 7a 00 	lds	r31, 0x007A	; 0x80007a <ispTransmit+0x1>
 5da:	80 e0       	ldi	r24, 0x00	; 0
 5dc:	09 95       	icall
 5de:	d3 35       	cpi	r29, 0x53	; 83
 5e0:	89 f0       	breq	.+34     	; 0x604 <ispEnterProgrammingMode+0x62>
 5e2:	1d b8       	out	0x0d, r1	; 13
 5e4:	a0 df       	rcall	.-192    	; 0x526 <ispDelay>
 5e6:	c2 9a       	sbi	0x18, 2	; 24
 5e8:	9e df       	rcall	.-196    	; 0x526 <ispDelay>
 5ea:	c2 98       	cbi	0x18, 2	; 24
 5ec:	9c df       	rcall	.-200    	; 0x526 <ispDelay>
 5ee:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <ispTransmit>
 5f2:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <ispTransmit+0x1>
 5f6:	82 51       	subi	r24, 0x12	; 18
 5f8:	92 40       	sbci	r25, 0x02	; 2
 5fa:	b1 f6       	brne	.-84     	; 0x5a8 <ispEnterProgrammingMode+0x6>
 5fc:	41 df       	rcall	.-382    	; 0x480 <spiHWenable>
 5fe:	d4 cf       	rjmp	.-88     	; 0x5a8 <ispEnterProgrammingMode+0x6>
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	01 c0       	rjmp	.+2      	; 0x606 <ispEnterProgrammingMode+0x64>
 604:	80 e0       	ldi	r24, 0x00	; 0
 606:	df 91       	pop	r29
 608:	cf 91       	pop	r28
 60a:	08 95       	ret

0000060c <ispReadFlash>:
 60c:	cf 92       	push	r12
 60e:	df 92       	push	r13
 610:	ef 92       	push	r14
 612:	ff 92       	push	r15
 614:	6b 01       	movw	r12, r22
 616:	7c 01       	movw	r14, r24
 618:	0a df       	rcall	.-492    	; 0x42e <ispUpdateExtended>
 61a:	8c 2d       	mov	r24, r12
 61c:	81 70       	andi	r24, 0x01	; 1
 61e:	88 0f       	add	r24, r24
 620:	88 0f       	add	r24, r24
 622:	88 0f       	add	r24, r24
 624:	e0 91 79 00 	lds	r30, 0x0079	; 0x800079 <ispTransmit>
 628:	f0 91 7a 00 	lds	r31, 0x007A	; 0x80007a <ispTransmit+0x1>
 62c:	80 62       	ori	r24, 0x20	; 32
 62e:	09 95       	icall
 630:	d7 01       	movw	r26, r14
 632:	c6 01       	movw	r24, r12
 634:	29 e0       	ldi	r18, 0x09	; 9
 636:	b6 95       	lsr	r27
 638:	a7 95       	ror	r26
 63a:	97 95       	ror	r25
 63c:	87 95       	ror	r24
 63e:	2a 95       	dec	r18
 640:	d1 f7       	brne	.-12     	; 0x636 <ispReadFlash+0x2a>
 642:	e0 91 79 00 	lds	r30, 0x0079	; 0x800079 <ispTransmit>
 646:	f0 91 7a 00 	lds	r31, 0x007A	; 0x80007a <ispTransmit+0x1>
 64a:	09 95       	icall
 64c:	d7 01       	movw	r26, r14
 64e:	c6 01       	movw	r24, r12
 650:	b6 95       	lsr	r27
 652:	a7 95       	ror	r26
 654:	97 95       	ror	r25
 656:	87 95       	ror	r24
 658:	e0 91 79 00 	lds	r30, 0x0079	; 0x800079 <ispTransmit>
 65c:	f0 91 7a 00 	lds	r31, 0x007A	; 0x80007a <ispTransmit+0x1>
 660:	09 95       	icall
 662:	e0 91 79 00 	lds	r30, 0x0079	; 0x800079 <ispTransmit>
 666:	f0 91 7a 00 	lds	r31, 0x007A	; 0x80007a <ispTransmit+0x1>
 66a:	80 e0       	ldi	r24, 0x00	; 0
 66c:	ff 90       	pop	r15
 66e:	ef 90       	pop	r14
 670:	df 90       	pop	r13
 672:	cf 90       	pop	r12
 674:	09 94       	ijmp

00000676 <ispWriteFlash>:
 676:	cf 92       	push	r12
 678:	df 92       	push	r13
 67a:	ef 92       	push	r14
 67c:	ff 92       	push	r15
 67e:	cf 93       	push	r28
 680:	df 93       	push	r29
 682:	6b 01       	movw	r12, r22
 684:	7c 01       	movw	r14, r24
 686:	c4 2f       	mov	r28, r20
 688:	d2 2f       	mov	r29, r18
 68a:	d1 de       	rcall	.-606    	; 0x42e <ispUpdateExtended>
 68c:	8c 2d       	mov	r24, r12
 68e:	81 70       	andi	r24, 0x01	; 1
 690:	88 0f       	add	r24, r24
 692:	88 0f       	add	r24, r24
 694:	88 0f       	add	r24, r24
 696:	e0 91 79 00 	lds	r30, 0x0079	; 0x800079 <ispTransmit>
 69a:	f0 91 7a 00 	lds	r31, 0x007A	; 0x80007a <ispTransmit+0x1>
 69e:	80 64       	ori	r24, 0x40	; 64
 6a0:	09 95       	icall
 6a2:	d7 01       	movw	r26, r14
 6a4:	c6 01       	movw	r24, r12
 6a6:	29 e0       	ldi	r18, 0x09	; 9
 6a8:	b6 95       	lsr	r27
 6aa:	a7 95       	ror	r26
 6ac:	97 95       	ror	r25
 6ae:	87 95       	ror	r24
 6b0:	2a 95       	dec	r18
 6b2:	d1 f7       	brne	.-12     	; 0x6a8 <ispWriteFlash+0x32>
 6b4:	e0 91 79 00 	lds	r30, 0x0079	; 0x800079 <ispTransmit>
 6b8:	f0 91 7a 00 	lds	r31, 0x007A	; 0x80007a <ispTransmit+0x1>
 6bc:	09 95       	icall
 6be:	d7 01       	movw	r26, r14
 6c0:	c6 01       	movw	r24, r12
 6c2:	b6 95       	lsr	r27
 6c4:	a7 95       	ror	r26
 6c6:	97 95       	ror	r25
 6c8:	87 95       	ror	r24
 6ca:	e0 91 79 00 	lds	r30, 0x0079	; 0x800079 <ispTransmit>
 6ce:	f0 91 7a 00 	lds	r31, 0x007A	; 0x80007a <ispTransmit+0x1>
 6d2:	09 95       	icall
 6d4:	e0 91 79 00 	lds	r30, 0x0079	; 0x800079 <ispTransmit>
 6d8:	f0 91 7a 00 	lds	r31, 0x007A	; 0x80007a <ispTransmit+0x1>
 6dc:	8c 2f       	mov	r24, r28
 6de:	09 95       	icall
 6e0:	dd 23       	and	r29, r29
 6e2:	21 f0       	breq	.+8      	; 0x6ec <ispWriteFlash+0x76>
 6e4:	cf 37       	cpi	r28, 0x7F	; 127
 6e6:	21 f4       	brne	.+8      	; 0x6f0 <ispWriteFlash+0x7a>
 6e8:	8f e0       	ldi	r24, 0x0F	; 15
 6ea:	91 de       	rcall	.-734    	; 0x40e <clockWait>
 6ec:	80 e0       	ldi	r24, 0x00	; 0
 6ee:	0f c0       	rjmp	.+30     	; 0x70e <ispWriteFlash+0x98>
 6f0:	d2 b7       	in	r29, 0x32	; 50
 6f2:	ce e1       	ldi	r28, 0x1E	; 30
 6f4:	c7 01       	movw	r24, r14
 6f6:	b6 01       	movw	r22, r12
 6f8:	89 df       	rcall	.-238    	; 0x60c <ispReadFlash>
 6fa:	8f 37       	cpi	r24, 0x7F	; 127
 6fc:	b9 f7       	brne	.-18     	; 0x6ec <ispWriteFlash+0x76>
 6fe:	82 b7       	in	r24, 0x32	; 50
 700:	8d 1b       	sub	r24, r29
 702:	8d 33       	cpi	r24, 0x3D	; 61
 704:	b8 f3       	brcs	.-18     	; 0x6f4 <ispWriteFlash+0x7e>
 706:	d2 b7       	in	r29, 0x32	; 50
 708:	c1 50       	subi	r28, 0x01	; 1
 70a:	a1 f7       	brne	.-24     	; 0x6f4 <ispWriteFlash+0x7e>
 70c:	81 e0       	ldi	r24, 0x01	; 1
 70e:	df 91       	pop	r29
 710:	cf 91       	pop	r28
 712:	ff 90       	pop	r15
 714:	ef 90       	pop	r14
 716:	df 90       	pop	r13
 718:	cf 90       	pop	r12
 71a:	08 95       	ret

0000071c <ispFlushPage>:
 71c:	cf 92       	push	r12
 71e:	df 92       	push	r13
 720:	ef 92       	push	r14
 722:	ff 92       	push	r15
 724:	cf 93       	push	r28
 726:	df 93       	push	r29
 728:	6b 01       	movw	r12, r22
 72a:	7c 01       	movw	r14, r24
 72c:	c4 2f       	mov	r28, r20
 72e:	7f de       	rcall	.-770    	; 0x42e <ispUpdateExtended>
 730:	e0 91 79 00 	lds	r30, 0x0079	; 0x800079 <ispTransmit>
 734:	f0 91 7a 00 	lds	r31, 0x007A	; 0x80007a <ispTransmit+0x1>
 738:	8c e4       	ldi	r24, 0x4C	; 76
 73a:	09 95       	icall
 73c:	d7 01       	movw	r26, r14
 73e:	c6 01       	movw	r24, r12
 740:	29 e0       	ldi	r18, 0x09	; 9
 742:	b6 95       	lsr	r27
 744:	a7 95       	ror	r26
 746:	97 95       	ror	r25
 748:	87 95       	ror	r24
 74a:	2a 95       	dec	r18
 74c:	d1 f7       	brne	.-12     	; 0x742 <ispFlushPage+0x26>
 74e:	e0 91 79 00 	lds	r30, 0x0079	; 0x800079 <ispTransmit>
 752:	f0 91 7a 00 	lds	r31, 0x007A	; 0x80007a <ispTransmit+0x1>
 756:	09 95       	icall
 758:	d7 01       	movw	r26, r14
 75a:	c6 01       	movw	r24, r12
 75c:	b6 95       	lsr	r27
 75e:	a7 95       	ror	r26
 760:	97 95       	ror	r25
 762:	87 95       	ror	r24
 764:	e0 91 79 00 	lds	r30, 0x0079	; 0x800079 <ispTransmit>
 768:	f0 91 7a 00 	lds	r31, 0x007A	; 0x80007a <ispTransmit+0x1>
 76c:	09 95       	icall
 76e:	e0 91 79 00 	lds	r30, 0x0079	; 0x800079 <ispTransmit>
 772:	f0 91 7a 00 	lds	r31, 0x007A	; 0x80007a <ispTransmit+0x1>
 776:	80 e0       	ldi	r24, 0x00	; 0
 778:	09 95       	icall
 77a:	cf 3f       	cpi	r28, 0xFF	; 255
 77c:	19 f4       	brne	.+6      	; 0x784 <ispFlushPage+0x68>
 77e:	8f e0       	ldi	r24, 0x0F	; 15
 780:	46 de       	rcall	.-884    	; 0x40e <clockWait>
 782:	10 c0       	rjmp	.+32     	; 0x7a4 <ispFlushPage+0x88>
 784:	d2 b7       	in	r29, 0x32	; 50
 786:	ce e1       	ldi	r28, 0x1E	; 30
 788:	c7 01       	movw	r24, r14
 78a:	b6 01       	movw	r22, r12
 78c:	3f df       	rcall	.-386    	; 0x60c <ispReadFlash>
 78e:	8f 3f       	cpi	r24, 0xFF	; 255
 790:	49 f4       	brne	.+18     	; 0x7a4 <ispFlushPage+0x88>
 792:	82 b7       	in	r24, 0x32	; 50
 794:	8d 1b       	sub	r24, r29
 796:	8d 33       	cpi	r24, 0x3D	; 61
 798:	b8 f3       	brcs	.-18     	; 0x788 <ispFlushPage+0x6c>
 79a:	d2 b7       	in	r29, 0x32	; 50
 79c:	c1 50       	subi	r28, 0x01	; 1
 79e:	a1 f7       	brne	.-24     	; 0x788 <ispFlushPage+0x6c>
 7a0:	81 e0       	ldi	r24, 0x01	; 1
 7a2:	01 c0       	rjmp	.+2      	; 0x7a6 <ispFlushPage+0x8a>
 7a4:	80 e0       	ldi	r24, 0x00	; 0
 7a6:	df 91       	pop	r29
 7a8:	cf 91       	pop	r28
 7aa:	ff 90       	pop	r15
 7ac:	ef 90       	pop	r14
 7ae:	df 90       	pop	r13
 7b0:	cf 90       	pop	r12
 7b2:	08 95       	ret

000007b4 <ispReadEEPROM>:
 7b4:	cf 93       	push	r28
 7b6:	df 93       	push	r29
 7b8:	ec 01       	movw	r28, r24
 7ba:	e0 91 79 00 	lds	r30, 0x0079	; 0x800079 <ispTransmit>
 7be:	f0 91 7a 00 	lds	r31, 0x007A	; 0x80007a <ispTransmit+0x1>
 7c2:	80 ea       	ldi	r24, 0xA0	; 160
 7c4:	09 95       	icall
 7c6:	e0 91 79 00 	lds	r30, 0x0079	; 0x800079 <ispTransmit>
 7ca:	f0 91 7a 00 	lds	r31, 0x007A	; 0x80007a <ispTransmit+0x1>
 7ce:	8d 2f       	mov	r24, r29
 7d0:	09 95       	icall
 7d2:	e0 91 79 00 	lds	r30, 0x0079	; 0x800079 <ispTransmit>
 7d6:	f0 91 7a 00 	lds	r31, 0x007A	; 0x80007a <ispTransmit+0x1>
 7da:	8c 2f       	mov	r24, r28
 7dc:	09 95       	icall
 7de:	e0 91 79 00 	lds	r30, 0x0079	; 0x800079 <ispTransmit>
 7e2:	f0 91 7a 00 	lds	r31, 0x007A	; 0x80007a <ispTransmit+0x1>
 7e6:	80 e0       	ldi	r24, 0x00	; 0
 7e8:	df 91       	pop	r29
 7ea:	cf 91       	pop	r28
 7ec:	09 94       	ijmp

000007ee <ispWriteEEPROM>:
 7ee:	1f 93       	push	r17
 7f0:	cf 93       	push	r28
 7f2:	df 93       	push	r29
 7f4:	d8 2f       	mov	r29, r24
 7f6:	19 2f       	mov	r17, r25
 7f8:	c6 2f       	mov	r28, r22
 7fa:	e0 91 79 00 	lds	r30, 0x0079	; 0x800079 <ispTransmit>
 7fe:	f0 91 7a 00 	lds	r31, 0x007A	; 0x80007a <ispTransmit+0x1>
 802:	80 ec       	ldi	r24, 0xC0	; 192
 804:	09 95       	icall
 806:	e0 91 79 00 	lds	r30, 0x0079	; 0x800079 <ispTransmit>
 80a:	f0 91 7a 00 	lds	r31, 0x007A	; 0x80007a <ispTransmit+0x1>
 80e:	81 2f       	mov	r24, r17
 810:	09 95       	icall
 812:	e0 91 79 00 	lds	r30, 0x0079	; 0x800079 <ispTransmit>
 816:	f0 91 7a 00 	lds	r31, 0x007A	; 0x80007a <ispTransmit+0x1>
 81a:	8d 2f       	mov	r24, r29
 81c:	09 95       	icall
 81e:	e0 91 79 00 	lds	r30, 0x0079	; 0x800079 <ispTransmit>
 822:	f0 91 7a 00 	lds	r31, 0x007A	; 0x80007a <ispTransmit+0x1>
 826:	8c 2f       	mov	r24, r28
 828:	09 95       	icall
 82a:	8e e1       	ldi	r24, 0x1E	; 30
 82c:	f0 dd       	rcall	.-1056   	; 0x40e <clockWait>
 82e:	80 e0       	ldi	r24, 0x00	; 0
 830:	df 91       	pop	r29
 832:	cf 91       	pop	r28
 834:	1f 91       	pop	r17
 836:	08 95       	ret

00000838 <usbFunctionSetup>:
 838:	cf 93       	push	r28
 83a:	df 93       	push	r29
 83c:	ec 01       	movw	r28, r24
 83e:	89 81       	ldd	r24, Y+1	; 0x01
 840:	81 30       	cpi	r24, 0x01	; 1
 842:	61 f4       	brne	.+24     	; 0x85c <usbFunctionSetup+0x24>
 844:	9a 99       	sbic	0x13, 2	; 19
 846:	02 c0       	rjmp	.+4      	; 0x84c <usbFunctionSetup+0x14>
 848:	85 e0       	ldi	r24, 0x05	; 5
 84a:	02 c0       	rjmp	.+4      	; 0x850 <usbFunctionSetup+0x18>
 84c:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <prog_sck>
 850:	1e de       	rcall	.-964    	; 0x48e <ispSetSCKOption>
 852:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <prog_address_newmode>
 856:	a9 98       	cbi	0x15, 1	; 21
 858:	88 de       	rcall	.-752    	; 0x56a <ispConnect>
 85a:	44 c1       	rjmp	.+648    	; 0xae4 <usbFunctionSetup+0x2ac>
 85c:	82 30       	cpi	r24, 0x02	; 2
 85e:	11 f4       	brne	.+4      	; 0x864 <usbFunctionSetup+0x2c>
 860:	98 de       	rcall	.-720    	; 0x592 <ispDisconnect>
 862:	f2 c0       	rjmp	.+484    	; 0xa48 <usbFunctionSetup+0x210>
 864:	83 30       	cpi	r24, 0x03	; 3
 866:	09 f5       	brne	.+66     	; 0x8aa <usbFunctionSetup+0x72>
 868:	e0 91 79 00 	lds	r30, 0x0079	; 0x800079 <ispTransmit>
 86c:	f0 91 7a 00 	lds	r31, 0x007A	; 0x80007a <ispTransmit+0x1>
 870:	8a 81       	ldd	r24, Y+2	; 0x02
 872:	09 95       	icall
 874:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <replyBuffer>
 878:	e0 91 79 00 	lds	r30, 0x0079	; 0x800079 <ispTransmit>
 87c:	f0 91 7a 00 	lds	r31, 0x007A	; 0x80007a <ispTransmit+0x1>
 880:	8b 81       	ldd	r24, Y+3	; 0x03
 882:	09 95       	icall
 884:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <replyBuffer+0x1>
 888:	e0 91 79 00 	lds	r30, 0x0079	; 0x800079 <ispTransmit>
 88c:	f0 91 7a 00 	lds	r31, 0x007A	; 0x80007a <ispTransmit+0x1>
 890:	8c 81       	ldd	r24, Y+4	; 0x04
 892:	09 95       	icall
 894:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <replyBuffer+0x2>
 898:	e0 91 79 00 	lds	r30, 0x0079	; 0x800079 <ispTransmit>
 89c:	f0 91 7a 00 	lds	r31, 0x007A	; 0x80007a <ispTransmit+0x1>
 8a0:	8d 81       	ldd	r24, Y+5	; 0x05
 8a2:	09 95       	icall
 8a4:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <replyBuffer+0x3>
 8a8:	1b c1       	rjmp	.+566    	; 0xae0 <usbFunctionSetup+0x2a8>
 8aa:	84 30       	cpi	r24, 0x04	; 4
 8ac:	d1 f4       	brne	.+52     	; 0x8e2 <usbFunctionSetup+0xaa>
 8ae:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <prog_address_newmode>
 8b2:	81 11       	cpse	r24, r1
 8b4:	0e c0       	rjmp	.+28     	; 0x8d2 <usbFunctionSetup+0x9a>
 8b6:	8a 81       	ldd	r24, Y+2	; 0x02
 8b8:	9b 81       	ldd	r25, Y+3	; 0x03
 8ba:	09 2e       	mov	r0, r25
 8bc:	00 0c       	add	r0, r0
 8be:	aa 0b       	sbc	r26, r26
 8c0:	bb 0b       	sbc	r27, r27
 8c2:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <prog_address>
 8c6:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <prog_address+0x1>
 8ca:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <prog_address+0x2>
 8ce:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <prog_address+0x3>
 8d2:	8e 81       	ldd	r24, Y+6	; 0x06
 8d4:	9f 81       	ldd	r25, Y+7	; 0x07
 8d6:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <prog_nbytes+0x1>
 8da:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <prog_nbytes>
 8de:	82 e0       	ldi	r24, 0x02	; 2
 8e0:	f0 c0       	rjmp	.+480    	; 0xac2 <usbFunctionSetup+0x28a>
 8e2:	87 30       	cpi	r24, 0x07	; 7
 8e4:	d1 f4       	brne	.+52     	; 0x91a <usbFunctionSetup+0xe2>
 8e6:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <prog_address_newmode>
 8ea:	81 11       	cpse	r24, r1
 8ec:	0e c0       	rjmp	.+28     	; 0x90a <usbFunctionSetup+0xd2>
 8ee:	8a 81       	ldd	r24, Y+2	; 0x02
 8f0:	9b 81       	ldd	r25, Y+3	; 0x03
 8f2:	09 2e       	mov	r0, r25
 8f4:	00 0c       	add	r0, r0
 8f6:	aa 0b       	sbc	r26, r26
 8f8:	bb 0b       	sbc	r27, r27
 8fa:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <prog_address>
 8fe:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <prog_address+0x1>
 902:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <prog_address+0x2>
 906:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <prog_address+0x3>
 90a:	8e 81       	ldd	r24, Y+6	; 0x06
 90c:	9f 81       	ldd	r25, Y+7	; 0x07
 90e:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <prog_nbytes+0x1>
 912:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <prog_nbytes>
 916:	83 e0       	ldi	r24, 0x03	; 3
 918:	d4 c0       	rjmp	.+424    	; 0xac2 <usbFunctionSetup+0x28a>
 91a:	85 30       	cpi	r24, 0x05	; 5
 91c:	11 f4       	brne	.+4      	; 0x922 <usbFunctionSetup+0xea>
 91e:	41 de       	rcall	.-894    	; 0x5a2 <ispEnterProgrammingMode>
 920:	98 c0       	rjmp	.+304    	; 0xa52 <usbFunctionSetup+0x21a>
 922:	86 30       	cpi	r24, 0x06	; 6
 924:	79 f5       	brne	.+94     	; 0x984 <usbFunctionSetup+0x14c>
 926:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <prog_address_newmode>
 92a:	81 11       	cpse	r24, r1
 92c:	0e c0       	rjmp	.+28     	; 0x94a <usbFunctionSetup+0x112>
 92e:	8a 81       	ldd	r24, Y+2	; 0x02
 930:	9b 81       	ldd	r25, Y+3	; 0x03
 932:	09 2e       	mov	r0, r25
 934:	00 0c       	add	r0, r0
 936:	aa 0b       	sbc	r26, r26
 938:	bb 0b       	sbc	r27, r27
 93a:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <prog_address>
 93e:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <prog_address+0x1>
 942:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <prog_address+0x2>
 946:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <prog_address+0x3>
 94a:	3c 81       	ldd	r19, Y+4	; 0x04
 94c:	2d 81       	ldd	r18, Y+5	; 0x05
 94e:	82 2f       	mov	r24, r18
 950:	8f 70       	andi	r24, 0x0F	; 15
 952:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <prog_blockflags>
 956:	82 2f       	mov	r24, r18
 958:	80 7f       	andi	r24, 0xF0	; 240
 95a:	40 e1       	ldi	r20, 0x10	; 16
 95c:	84 9f       	mul	r24, r20
 95e:	c0 01       	movw	r24, r0
 960:	11 24       	eor	r1, r1
 962:	83 0f       	add	r24, r19
 964:	91 1d       	adc	r25, r1
 966:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <prog_pagesize+0x1>
 96a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <prog_pagesize>
 96e:	20 fd       	sbrc	r18, 0
 970:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 974:	8e 81       	ldd	r24, Y+6	; 0x06
 976:	9f 81       	ldd	r25, Y+7	; 0x07
 978:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <prog_nbytes+0x1>
 97c:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <prog_nbytes>
 980:	81 e0       	ldi	r24, 0x01	; 1
 982:	9f c0       	rjmp	.+318    	; 0xac2 <usbFunctionSetup+0x28a>
 984:	88 30       	cpi	r24, 0x08	; 8
 986:	01 f5       	brne	.+64     	; 0x9c8 <usbFunctionSetup+0x190>
 988:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <prog_address_newmode>
 98c:	81 11       	cpse	r24, r1
 98e:	0e c0       	rjmp	.+28     	; 0x9ac <usbFunctionSetup+0x174>
 990:	8a 81       	ldd	r24, Y+2	; 0x02
 992:	9b 81       	ldd	r25, Y+3	; 0x03
 994:	09 2e       	mov	r0, r25
 996:	00 0c       	add	r0, r0
 998:	aa 0b       	sbc	r26, r26
 99a:	bb 0b       	sbc	r27, r27
 99c:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <prog_address>
 9a0:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <prog_address+0x1>
 9a4:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <prog_address+0x2>
 9a8:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <prog_address+0x3>
 9ac:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <prog_pagesize+0x1>
 9b0:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <prog_pagesize>
 9b4:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <prog_blockflags>
 9b8:	8e 81       	ldd	r24, Y+6	; 0x06
 9ba:	9f 81       	ldd	r25, Y+7	; 0x07
 9bc:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <prog_nbytes+0x1>
 9c0:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <prog_nbytes>
 9c4:	84 e0       	ldi	r24, 0x04	; 4
 9c6:	7d c0       	rjmp	.+250    	; 0xac2 <usbFunctionSetup+0x28a>
 9c8:	89 30       	cpi	r24, 0x09	; 9
 9ca:	81 f4       	brne	.+32     	; 0x9ec <usbFunctionSetup+0x1b4>
 9cc:	81 e0       	ldi	r24, 0x01	; 1
 9ce:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <prog_address_newmode>
 9d2:	8a 81       	ldd	r24, Y+2	; 0x02
 9d4:	9b 81       	ldd	r25, Y+3	; 0x03
 9d6:	ac 81       	ldd	r26, Y+4	; 0x04
 9d8:	bd 81       	ldd	r27, Y+5	; 0x05
 9da:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <prog_address>
 9de:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <prog_address+0x1>
 9e2:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <prog_address+0x2>
 9e6:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <prog_address+0x3>
 9ea:	7c c0       	rjmp	.+248    	; 0xae4 <usbFunctionSetup+0x2ac>
 9ec:	8a 30       	cpi	r24, 0x0A	; 10
 9ee:	31 f4       	brne	.+12     	; 0x9fc <usbFunctionSetup+0x1c4>
 9f0:	8a 81       	ldd	r24, Y+2	; 0x02
 9f2:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <prog_sck>
 9f6:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <replyBuffer>
 9fa:	2d c0       	rjmp	.+90     	; 0xa56 <usbFunctionSetup+0x21e>
 9fc:	8b 30       	cpi	r24, 0x0B	; 11
 9fe:	81 f4       	brne	.+32     	; 0xa20 <usbFunctionSetup+0x1e8>
 a00:	8a 81       	ldd	r24, Y+2	; 0x02
 a02:	9b 81       	ldd	r25, Y+3	; 0x03
 a04:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <tpi_dly_cnt+0x1>
 a08:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <tpi_dly_cnt>
 a0c:	c2 9a       	sbi	0x18, 2	; 24
 a0e:	ba 9a       	sbi	0x17, 2	; 23
 a10:	83 e0       	ldi	r24, 0x03	; 3
 a12:	fd dc       	rcall	.-1542   	; 0x40e <clockWait>
 a14:	c2 98       	cbi	0x18, 2	; 24
 a16:	a9 98       	cbi	0x15, 1	; 21
 a18:	80 e1       	ldi	r24, 0x10	; 16
 a1a:	f9 dc       	rcall	.-1550   	; 0x40e <clockWait>
 a1c:	49 db       	rcall	.-2414   	; 0xb0 <tpi_init>
 a1e:	62 c0       	rjmp	.+196    	; 0xae4 <usbFunctionSetup+0x2ac>
 a20:	8c 30       	cpi	r24, 0x0C	; 12
 a22:	a1 f4       	brne	.+40     	; 0xa4c <usbFunctionSetup+0x214>
 a24:	80 ec       	ldi	r24, 0xC0	; 192
 a26:	54 db       	rcall	.-2392   	; 0xd0 <tpi_send_byte>
 a28:	80 e0       	ldi	r24, 0x00	; 0
 a2a:	52 db       	rcall	.-2396   	; 0xd0 <tpi_send_byte>
 a2c:	8a e0       	ldi	r24, 0x0A	; 10
 a2e:	ef dc       	rcall	.-1570   	; 0x40e <clockWait>
 a30:	c2 9a       	sbi	0x18, 2	; 24
 a32:	85 e0       	ldi	r24, 0x05	; 5
 a34:	ec dc       	rcall	.-1576   	; 0x40e <clockWait>
 a36:	c2 98       	cbi	0x18, 2	; 24
 a38:	85 e0       	ldi	r24, 0x05	; 5
 a3a:	e9 dc       	rcall	.-1582   	; 0x40e <clockWait>
 a3c:	87 b3       	in	r24, 0x17	; 23
 a3e:	83 7d       	andi	r24, 0xD3	; 211
 a40:	87 bb       	out	0x17, r24	; 23
 a42:	88 b3       	in	r24, 0x18	; 24
 a44:	83 7d       	andi	r24, 0xD3	; 211
 a46:	88 bb       	out	0x18, r24	; 24
 a48:	a9 9a       	sbi	0x15, 1	; 21
 a4a:	4c c0       	rjmp	.+152    	; 0xae4 <usbFunctionSetup+0x2ac>
 a4c:	8d 30       	cpi	r24, 0x0D	; 13
 a4e:	29 f4       	brne	.+10     	; 0xa5a <usbFunctionSetup+0x222>
 a50:	62 db       	rcall	.-2364   	; 0x116 <tpi_recv_byte>
 a52:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <replyBuffer>
 a56:	81 e0       	ldi	r24, 0x01	; 1
 a58:	46 c0       	rjmp	.+140    	; 0xae6 <usbFunctionSetup+0x2ae>
 a5a:	8e 30       	cpi	r24, 0x0E	; 14
 a5c:	19 f4       	brne	.+6      	; 0xa64 <usbFunctionSetup+0x22c>
 a5e:	8a 81       	ldd	r24, Y+2	; 0x02
 a60:	37 db       	rcall	.-2450   	; 0xd0 <tpi_send_byte>
 a62:	40 c0       	rjmp	.+128    	; 0xae4 <usbFunctionSetup+0x2ac>
 a64:	8f 30       	cpi	r24, 0x0F	; 15
 a66:	b1 f4       	brne	.+44     	; 0xa94 <usbFunctionSetup+0x25c>
 a68:	8a 81       	ldd	r24, Y+2	; 0x02
 a6a:	9b 81       	ldd	r25, Y+3	; 0x03
 a6c:	09 2e       	mov	r0, r25
 a6e:	00 0c       	add	r0, r0
 a70:	aa 0b       	sbc	r26, r26
 a72:	bb 0b       	sbc	r27, r27
 a74:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <prog_address>
 a78:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <prog_address+0x1>
 a7c:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <prog_address+0x2>
 a80:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <prog_address+0x3>
 a84:	8e 81       	ldd	r24, Y+6	; 0x06
 a86:	9f 81       	ldd	r25, Y+7	; 0x07
 a88:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <prog_nbytes+0x1>
 a8c:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <prog_nbytes>
 a90:	85 e0       	ldi	r24, 0x05	; 5
 a92:	17 c0       	rjmp	.+46     	; 0xac2 <usbFunctionSetup+0x28a>
 a94:	80 31       	cpi	r24, 0x10	; 16
 a96:	c9 f4       	brne	.+50     	; 0xaca <usbFunctionSetup+0x292>
 a98:	8a 81       	ldd	r24, Y+2	; 0x02
 a9a:	9b 81       	ldd	r25, Y+3	; 0x03
 a9c:	09 2e       	mov	r0, r25
 a9e:	00 0c       	add	r0, r0
 aa0:	aa 0b       	sbc	r26, r26
 aa2:	bb 0b       	sbc	r27, r27
 aa4:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <prog_address>
 aa8:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <prog_address+0x1>
 aac:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <prog_address+0x2>
 ab0:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <prog_address+0x3>
 ab4:	8e 81       	ldd	r24, Y+6	; 0x06
 ab6:	9f 81       	ldd	r25, Y+7	; 0x07
 ab8:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <prog_nbytes+0x1>
 abc:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <prog_nbytes>
 ac0:	86 e0       	ldi	r24, 0x06	; 6
 ac2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <prog_state>
 ac6:	8f ef       	ldi	r24, 0xFF	; 255
 ac8:	0e c0       	rjmp	.+28     	; 0xae6 <usbFunctionSetup+0x2ae>
 aca:	8f 37       	cpi	r24, 0x7F	; 127
 acc:	59 f4       	brne	.+22     	; 0xae4 <usbFunctionSetup+0x2ac>
 ace:	81 e0       	ldi	r24, 0x01	; 1
 ad0:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <replyBuffer>
 ad4:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <replyBuffer+0x1>
 ad8:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <replyBuffer+0x2>
 adc:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <replyBuffer+0x3>
 ae0:	84 e0       	ldi	r24, 0x04	; 4
 ae2:	01 c0       	rjmp	.+2      	; 0xae6 <usbFunctionSetup+0x2ae>
 ae4:	80 e0       	ldi	r24, 0x00	; 0
 ae6:	2f e6       	ldi	r18, 0x6F	; 111
 ae8:	30 e0       	ldi	r19, 0x00	; 0
 aea:	30 93 8f 00 	sts	0x008F, r19	; 0x80008f <usbMsgPtr+0x1>
 aee:	20 93 8e 00 	sts	0x008E, r18	; 0x80008e <usbMsgPtr>
 af2:	df 91       	pop	r29
 af4:	cf 91       	pop	r28
 af6:	08 95       	ret

00000af8 <usbFunctionRead>:
 af8:	ef 92       	push	r14
 afa:	ff 92       	push	r15
 afc:	0f 93       	push	r16
 afe:	1f 93       	push	r17
 b00:	cf 93       	push	r28
 b02:	c6 2f       	mov	r28, r22
 b04:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <prog_state>
 b08:	3e ef       	ldi	r19, 0xFE	; 254
 b0a:	32 0f       	add	r19, r18
 b0c:	32 30       	cpi	r19, 0x02	; 2
 b0e:	28 f4       	brcc	.+10     	; 0xb1a <usbFunctionRead+0x22>
 b10:	8c 01       	movw	r16, r24
 b12:	7c 01       	movw	r14, r24
 b14:	e6 0e       	add	r14, r22
 b16:	f1 1c       	adc	r15, r1
 b18:	43 c0       	rjmp	.+134    	; 0xba0 <usbFunctionRead+0xa8>
 b1a:	25 30       	cpi	r18, 0x05	; 5
 b1c:	09 f0       	breq	.+2      	; 0xb20 <usbFunctionRead+0x28>
 b1e:	4f c0       	rjmp	.+158    	; 0xbbe <usbFunctionRead+0xc6>
 b20:	46 2f       	mov	r20, r22
 b22:	bc 01       	movw	r22, r24
 b24:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <prog_address>
 b28:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <prog_address+0x1>
 b2c:	0d db       	rcall	.-2534   	; 0x148 <tpi_read_block>
 b2e:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <prog_address>
 b32:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <prog_address+0x1>
 b36:	a0 91 6a 00 	lds	r26, 0x006A	; 0x80006a <prog_address+0x2>
 b3a:	b0 91 6b 00 	lds	r27, 0x006B	; 0x80006b <prog_address+0x3>
 b3e:	8c 0f       	add	r24, r28
 b40:	91 1d       	adc	r25, r1
 b42:	a1 1d       	adc	r26, r1
 b44:	b1 1d       	adc	r27, r1
 b46:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <prog_address>
 b4a:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <prog_address+0x1>
 b4e:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <prog_address+0x2>
 b52:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <prog_address+0x3>
 b56:	35 c0       	rjmp	.+106    	; 0xbc2 <usbFunctionRead+0xca>
 b58:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <prog_state>
 b5c:	82 30       	cpi	r24, 0x02	; 2
 b5e:	21 f5       	brne	.+72     	; 0xba8 <usbFunctionRead+0xb0>
 b60:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <prog_address>
 b64:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <prog_address+0x1>
 b68:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <prog_address+0x2>
 b6c:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <prog_address+0x3>
 b70:	4d dd       	rcall	.-1382   	; 0x60c <ispReadFlash>
 b72:	f8 01       	movw	r30, r16
 b74:	80 83       	st	Z, r24
 b76:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <prog_address>
 b7a:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <prog_address+0x1>
 b7e:	a0 91 6a 00 	lds	r26, 0x006A	; 0x80006a <prog_address+0x2>
 b82:	b0 91 6b 00 	lds	r27, 0x006B	; 0x80006b <prog_address+0x3>
 b86:	01 96       	adiw	r24, 0x01	; 1
 b88:	a1 1d       	adc	r26, r1
 b8a:	b1 1d       	adc	r27, r1
 b8c:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <prog_address>
 b90:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <prog_address+0x1>
 b94:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <prog_address+0x2>
 b98:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <prog_address+0x3>
 b9c:	0f 5f       	subi	r16, 0xFF	; 255
 b9e:	1f 4f       	sbci	r17, 0xFF	; 255
 ba0:	0e 15       	cp	r16, r14
 ba2:	1f 05       	cpc	r17, r15
 ba4:	c9 f6       	brne	.-78     	; 0xb58 <usbFunctionRead+0x60>
 ba6:	06 c0       	rjmp	.+12     	; 0xbb4 <usbFunctionRead+0xbc>
 ba8:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <prog_address>
 bac:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <prog_address+0x1>
 bb0:	01 de       	rcall	.-1022   	; 0x7b4 <ispReadEEPROM>
 bb2:	df cf       	rjmp	.-66     	; 0xb72 <usbFunctionRead+0x7a>
 bb4:	c8 30       	cpi	r28, 0x08	; 8
 bb6:	28 f4       	brcc	.+10     	; 0xbc2 <usbFunctionRead+0xca>
 bb8:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <prog_state>
 bbc:	02 c0       	rjmp	.+4      	; 0xbc2 <usbFunctionRead+0xca>
 bbe:	8f ef       	ldi	r24, 0xFF	; 255
 bc0:	01 c0       	rjmp	.+2      	; 0xbc4 <usbFunctionRead+0xcc>
 bc2:	8c 2f       	mov	r24, r28
 bc4:	cf 91       	pop	r28
 bc6:	1f 91       	pop	r17
 bc8:	0f 91       	pop	r16
 bca:	ff 90       	pop	r15
 bcc:	ef 90       	pop	r14
 bce:	08 95       	ret

00000bd0 <usbFunctionWrite>:
 bd0:	ef 92       	push	r14
 bd2:	ff 92       	push	r15
 bd4:	1f 93       	push	r17
 bd6:	cf 93       	push	r28
 bd8:	df 93       	push	r29
 bda:	16 2f       	mov	r17, r22
 bdc:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <prog_state>
 be0:	21 30       	cpi	r18, 0x01	; 1
 be2:	31 f4       	brne	.+12     	; 0xbf0 <usbFunctionWrite+0x20>
 be4:	ec 01       	movw	r28, r24
 be6:	7c 01       	movw	r14, r24
 be8:	e1 0e       	add	r14, r17
 bea:	f1 1c       	adc	r15, r1
 bec:	10 e0       	ldi	r17, 0x00	; 0
 bee:	66 c0       	rjmp	.+204    	; 0xcbc <usbFunctionWrite+0xec>
 bf0:	24 30       	cpi	r18, 0x04	; 4
 bf2:	c1 f3       	breq	.-16     	; 0xbe4 <usbFunctionWrite+0x14>
 bf4:	26 30       	cpi	r18, 0x06	; 6
 bf6:	09 f0       	breq	.+2      	; 0xbfa <usbFunctionWrite+0x2a>
 bf8:	a3 c0       	rjmp	.+326    	; 0xd40 <usbFunctionWrite+0x170>
 bfa:	46 2f       	mov	r20, r22
 bfc:	bc 01       	movw	r22, r24
 bfe:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <prog_address>
 c02:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <prog_address+0x1>
 c06:	aa da       	rcall	.-2732   	; 0x15c <tpi_write_block>
 c08:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <prog_address>
 c0c:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <prog_address+0x1>
 c10:	a0 91 6a 00 	lds	r26, 0x006A	; 0x80006a <prog_address+0x2>
 c14:	b0 91 6b 00 	lds	r27, 0x006B	; 0x80006b <prog_address+0x3>
 c18:	81 0f       	add	r24, r17
 c1a:	91 1d       	adc	r25, r1
 c1c:	a1 1d       	adc	r26, r1
 c1e:	b1 1d       	adc	r27, r1
 c20:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <prog_address>
 c24:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <prog_address+0x1>
 c28:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <prog_address+0x2>
 c2c:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <prog_address+0x3>
 c30:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <prog_nbytes>
 c34:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <prog_nbytes+0x1>
 c38:	81 1b       	sub	r24, r17
 c3a:	91 09       	sbc	r25, r1
 c3c:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <prog_nbytes+0x1>
 c40:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <prog_nbytes>
 c44:	89 2b       	or	r24, r25
 c46:	09 f0       	breq	.+2      	; 0xc4a <usbFunctionWrite+0x7a>
 c48:	7d c0       	rjmp	.+250    	; 0xd44 <usbFunctionWrite+0x174>
 c4a:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <prog_state>
 c4e:	81 e0       	ldi	r24, 0x01	; 1
 c50:	7a c0       	rjmp	.+244    	; 0xd46 <usbFunctionWrite+0x176>
 c52:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <prog_state>
 c56:	81 30       	cpi	r24, 0x01	; 1
 c58:	09 f0       	breq	.+2      	; 0xc5c <usbFunctionWrite+0x8c>
 c5a:	4d c0       	rjmp	.+154    	; 0xcf6 <usbFunctionWrite+0x126>
 c5c:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <prog_pagesize>
 c60:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <prog_pagesize+0x1>
 c64:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <prog_address>
 c68:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <prog_address+0x1>
 c6c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <prog_address+0x2>
 c70:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <prog_address+0x3>
 c74:	23 2b       	or	r18, r19
 c76:	31 f5       	brne	.+76     	; 0xcc4 <usbFunctionWrite+0xf4>
 c78:	21 e0       	ldi	r18, 0x01	; 1
 c7a:	48 81       	ld	r20, Y
 c7c:	fc dc       	rcall	.-1544   	; 0x676 <ispWriteFlash>
 c7e:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <prog_nbytes>
 c82:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <prog_nbytes+0x1>
 c86:	01 97       	sbiw	r24, 0x01	; 1
 c88:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <prog_nbytes+0x1>
 c8c:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <prog_nbytes>
 c90:	89 2b       	or	r24, r25
 c92:	c1 f1       	breq	.+112    	; 0xd04 <usbFunctionWrite+0x134>
 c94:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <prog_address>
 c98:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <prog_address+0x1>
 c9c:	a0 91 6a 00 	lds	r26, 0x006A	; 0x80006a <prog_address+0x2>
 ca0:	b0 91 6b 00 	lds	r27, 0x006B	; 0x80006b <prog_address+0x3>
 ca4:	01 96       	adiw	r24, 0x01	; 1
 ca6:	a1 1d       	adc	r26, r1
 ca8:	b1 1d       	adc	r27, r1
 caa:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <prog_address>
 cae:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <prog_address+0x1>
 cb2:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <prog_address+0x2>
 cb6:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <prog_address+0x3>
 cba:	21 96       	adiw	r28, 0x01	; 1
 cbc:	ce 15       	cp	r28, r14
 cbe:	df 05       	cpc	r29, r15
 cc0:	41 f6       	brne	.-112    	; 0xc52 <usbFunctionWrite+0x82>
 cc2:	3c c0       	rjmp	.+120    	; 0xd3c <usbFunctionWrite+0x16c>
 cc4:	20 e0       	ldi	r18, 0x00	; 0
 cc6:	48 81       	ld	r20, Y
 cc8:	d6 dc       	rcall	.-1620   	; 0x676 <ispWriteFlash>
 cca:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 cce:	81 50       	subi	r24, 0x01	; 1
 cd0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 cd4:	81 11       	cpse	r24, r1
 cd6:	d3 cf       	rjmp	.-90     	; 0xc7e <usbFunctionWrite+0xae>
 cd8:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <prog_address>
 cdc:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <prog_address+0x1>
 ce0:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <prog_address+0x2>
 ce4:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <prog_address+0x3>
 ce8:	48 81       	ld	r20, Y
 cea:	18 dd       	rcall	.-1488   	; 0x71c <ispFlushPage>
 cec:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <prog_pagesize>
 cf0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 cf4:	c4 cf       	rjmp	.-120    	; 0xc7e <usbFunctionWrite+0xae>
 cf6:	68 81       	ld	r22, Y
 cf8:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <prog_address>
 cfc:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <prog_address+0x1>
 d00:	76 dd       	rcall	.-1300   	; 0x7ee <ispWriteEEPROM>
 d02:	bd cf       	rjmp	.-134    	; 0xc7e <usbFunctionWrite+0xae>
 d04:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <prog_state>
 d08:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <prog_blockflags>
 d0c:	81 ff       	sbrs	r24, 1
 d0e:	14 c0       	rjmp	.+40     	; 0xd38 <usbFunctionWrite+0x168>
 d10:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 d14:	90 e0       	ldi	r25, 0x00	; 0
 d16:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <prog_pagesize>
 d1a:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <prog_pagesize+0x1>
 d1e:	82 17       	cp	r24, r18
 d20:	93 07       	cpc	r25, r19
 d22:	51 f0       	breq	.+20     	; 0xd38 <usbFunctionWrite+0x168>
 d24:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <prog_address>
 d28:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <prog_address+0x1>
 d2c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <prog_address+0x2>
 d30:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <prog_address+0x3>
 d34:	48 81       	ld	r20, Y
 d36:	f2 dc       	rcall	.-1564   	; 0x71c <ispFlushPage>
 d38:	11 e0       	ldi	r17, 0x01	; 1
 d3a:	ac cf       	rjmp	.-168    	; 0xc94 <usbFunctionWrite+0xc4>
 d3c:	81 2f       	mov	r24, r17
 d3e:	03 c0       	rjmp	.+6      	; 0xd46 <usbFunctionWrite+0x176>
 d40:	8f ef       	ldi	r24, 0xFF	; 255
 d42:	01 c0       	rjmp	.+2      	; 0xd46 <usbFunctionWrite+0x176>
 d44:	80 e0       	ldi	r24, 0x00	; 0
 d46:	df 91       	pop	r29
 d48:	cf 91       	pop	r28
 d4a:	1f 91       	pop	r17
 d4c:	ff 90       	pop	r15
 d4e:	ef 90       	pop	r14
 d50:	08 95       	ret

00000d52 <main>:
 d52:	12 ba       	out	0x12, r1	; 18
 d54:	18 ba       	out	0x18, r1	; 24
 d56:	11 ba       	out	0x11, r1	; 17
 d58:	8f ef       	ldi	r24, 0xFF	; 255
 d5a:	87 bb       	out	0x17, r24	; 23
 d5c:	17 ba       	out	0x17, r1	; 23
 d5e:	83 e0       	ldi	r24, 0x03	; 3
 d60:	84 bb       	out	0x14, r24	; 20
 d62:	9e ef       	ldi	r25, 0xFE	; 254
 d64:	95 bb       	out	0x15, r25	; 21
 d66:	83 bf       	out	0x33, r24	; 51
 d68:	1b d1       	rcall	.+566    	; 0xfa0 <usbInit>
 d6a:	78 94       	sei
 d6c:	01 d0       	rcall	.+2      	; 0xd70 <usbPoll>
 d6e:	fe cf       	rjmp	.-4      	; 0xd6c <main+0x1a>

00000d70 <usbPoll>:
 d70:	cf 93       	push	r28
 d72:	df 93       	push	r29
 d74:	60 91 90 00 	lds	r22, 0x0090	; 0x800090 <usbRxLen>
 d78:	63 50       	subi	r22, 0x03	; 3
 d7a:	67 fd       	sbrc	r22, 7
 d7c:	a4 c0       	rjmp	.+328    	; 0xec6 <usbPoll+0x156>
 d7e:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <usbInputBufOffset>
 d82:	cc e0       	ldi	r28, 0x0C	; 12
 d84:	d0 e0       	ldi	r29, 0x00	; 0
 d86:	c8 1b       	sub	r28, r24
 d88:	d1 09       	sbc	r29, r1
 d8a:	cc 56       	subi	r28, 0x6C	; 108
 d8c:	df 4f       	sbci	r29, 0xFF	; 255
 d8e:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <usbRxToken>
 d92:	8d 32       	cpi	r24, 0x2D	; 45
 d94:	09 f0       	breq	.+2      	; 0xd98 <usbPoll+0x28>
 d96:	86 c0       	rjmp	.+268    	; 0xea4 <usbPoll+0x134>
 d98:	68 30       	cpi	r22, 0x08	; 8
 d9a:	09 f0       	breq	.+2      	; 0xd9e <usbPoll+0x2e>
 d9c:	92 c0       	rjmp	.+292    	; 0xec2 <usbPoll+0x152>
 d9e:	83 ec       	ldi	r24, 0xC3	; 195
 da0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <usbTxBuf>
 da4:	8a e5       	ldi	r24, 0x5A	; 90
 da6:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <usbTxLen>
 daa:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <usbMsgFlags>
 dae:	88 81       	ld	r24, Y
 db0:	80 76       	andi	r24, 0x60	; 96
 db2:	31 f0       	breq	.+12     	; 0xdc0 <usbPoll+0x50>
 db4:	ce 01       	movw	r24, r28
 db6:	40 dd       	rcall	.-1408   	; 0x838 <usbFunctionSetup>
 db8:	8f 3f       	cpi	r24, 0xFF	; 255
 dba:	09 f4       	brne	.+2      	; 0xdbe <usbPoll+0x4e>
 dbc:	62 c0       	rjmp	.+196    	; 0xe82 <usbPoll+0x112>
 dbe:	68 c0       	rjmp	.+208    	; 0xe90 <usbPoll+0x120>
 dc0:	8a 81       	ldd	r24, Y+2	; 0x02
 dc2:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <usbTxBuf+0x9>
 dc6:	99 81       	ldd	r25, Y+1	; 0x01
 dc8:	91 11       	cpse	r25, r1
 dca:	06 c0       	rjmp	.+12     	; 0xdd8 <usbPoll+0x68>
 dcc:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <usbTxBuf+0xa>
 dd0:	29 e8       	ldi	r18, 0x89	; 137
 dd2:	30 e0       	ldi	r19, 0x00	; 0
 dd4:	82 e0       	ldi	r24, 0x02	; 2
 dd6:	50 c0       	rjmp	.+160    	; 0xe78 <usbPoll+0x108>
 dd8:	95 30       	cpi	r25, 0x05	; 5
 dda:	19 f4       	brne	.+6      	; 0xde2 <usbPoll+0x72>
 ddc:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <usbNewDeviceAddr>
 de0:	3d c0       	rjmp	.+122    	; 0xe5c <usbPoll+0xec>
 de2:	96 30       	cpi	r25, 0x06	; 6
 de4:	a9 f5       	brne	.+106    	; 0xe50 <usbPoll+0xe0>
 de6:	9b 81       	ldd	r25, Y+3	; 0x03
 de8:	91 30       	cpi	r25, 0x01	; 1
 dea:	19 f4       	brne	.+6      	; 0xdf2 <usbPoll+0x82>
 dec:	88 e3       	ldi	r24, 0x38	; 56
 dee:	90 e0       	ldi	r25, 0x00	; 0
 df0:	04 c0       	rjmp	.+8      	; 0xdfa <usbPoll+0x8a>
 df2:	92 30       	cpi	r25, 0x02	; 2
 df4:	41 f4       	brne	.+16     	; 0xe06 <usbPoll+0x96>
 df6:	86 e2       	ldi	r24, 0x26	; 38
 df8:	90 e0       	ldi	r25, 0x00	; 0
 dfa:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <usbMsgPtr+0x1>
 dfe:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <usbMsgPtr>
 e02:	82 e1       	ldi	r24, 0x12	; 18
 e04:	21 c0       	rjmp	.+66     	; 0xe48 <usbPoll+0xd8>
 e06:	93 30       	cpi	r25, 0x03	; 3
 e08:	f1 f4       	brne	.+60     	; 0xe46 <usbPoll+0xd6>
 e0a:	81 11       	cpse	r24, r1
 e0c:	08 c0       	rjmp	.+16     	; 0xe1e <usbPoll+0xae>
 e0e:	84 e7       	ldi	r24, 0x74	; 116
 e10:	90 e0       	ldi	r25, 0x00	; 0
 e12:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <usbMsgPtr+0x1>
 e16:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <usbMsgPtr>
 e1a:	84 e0       	ldi	r24, 0x04	; 4
 e1c:	15 c0       	rjmp	.+42     	; 0xe48 <usbPoll+0xd8>
 e1e:	81 30       	cpi	r24, 0x01	; 1
 e20:	41 f4       	brne	.+16     	; 0xe32 <usbPoll+0xc2>
 e22:	88 e5       	ldi	r24, 0x58	; 88
 e24:	90 e0       	ldi	r25, 0x00	; 0
 e26:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <usbMsgPtr+0x1>
 e2a:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <usbMsgPtr>
 e2e:	8c e1       	ldi	r24, 0x1C	; 28
 e30:	0b c0       	rjmp	.+22     	; 0xe48 <usbPoll+0xd8>
 e32:	82 30       	cpi	r24, 0x02	; 2
 e34:	41 f4       	brne	.+16     	; 0xe46 <usbPoll+0xd6>
 e36:	8a e4       	ldi	r24, 0x4A	; 74
 e38:	90 e0       	ldi	r25, 0x00	; 0
 e3a:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <usbMsgPtr+0x1>
 e3e:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <usbMsgPtr>
 e42:	8e e0       	ldi	r24, 0x0E	; 14
 e44:	01 c0       	rjmp	.+2      	; 0xe48 <usbPoll+0xd8>
 e46:	80 e0       	ldi	r24, 0x00	; 0
 e48:	90 e4       	ldi	r25, 0x40	; 64
 e4a:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <usbMsgFlags>
 e4e:	20 c0       	rjmp	.+64     	; 0xe90 <usbPoll+0x120>
 e50:	98 30       	cpi	r25, 0x08	; 8
 e52:	79 f0       	breq	.+30     	; 0xe72 <usbPoll+0x102>
 e54:	99 30       	cpi	r25, 0x09	; 9
 e56:	31 f4       	brne	.+12     	; 0xe64 <usbPoll+0xf4>
 e58:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <usbConfiguration>
 e5c:	29 e8       	ldi	r18, 0x89	; 137
 e5e:	30 e0       	ldi	r19, 0x00	; 0
 e60:	80 e0       	ldi	r24, 0x00	; 0
 e62:	0a c0       	rjmp	.+20     	; 0xe78 <usbPoll+0x108>
 e64:	81 e0       	ldi	r24, 0x01	; 1
 e66:	9a 30       	cpi	r25, 0x0A	; 10
 e68:	09 f0       	breq	.+2      	; 0xe6c <usbPoll+0xfc>
 e6a:	80 e0       	ldi	r24, 0x00	; 0
 e6c:	29 e8       	ldi	r18, 0x89	; 137
 e6e:	30 e0       	ldi	r19, 0x00	; 0
 e70:	03 c0       	rjmp	.+6      	; 0xe78 <usbPoll+0x108>
 e72:	23 e9       	ldi	r18, 0x93	; 147
 e74:	30 e0       	ldi	r19, 0x00	; 0
 e76:	81 e0       	ldi	r24, 0x01	; 1
 e78:	30 93 8f 00 	sts	0x008F, r19	; 0x80008f <usbMsgPtr+0x1>
 e7c:	20 93 8e 00 	sts	0x008E, r18	; 0x80008e <usbMsgPtr>
 e80:	07 c0       	rjmp	.+14     	; 0xe90 <usbPoll+0x120>
 e82:	98 81       	ld	r25, Y
 e84:	97 fd       	sbrc	r25, 7
 e86:	8e 81       	ldd	r24, Y+6	; 0x06
 e88:	90 e8       	ldi	r25, 0x80	; 128
 e8a:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <usbMsgFlags>
 e8e:	07 c0       	rjmp	.+14     	; 0xe9e <usbPoll+0x12e>
 e90:	9f 81       	ldd	r25, Y+7	; 0x07
 e92:	91 11       	cpse	r25, r1
 e94:	04 c0       	rjmp	.+8      	; 0xe9e <usbPoll+0x12e>
 e96:	9e 81       	ldd	r25, Y+6	; 0x06
 e98:	98 17       	cp	r25, r24
 e9a:	08 f4       	brcc	.+2      	; 0xe9e <usbPoll+0x12e>
 e9c:	89 2f       	mov	r24, r25
 e9e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 ea2:	0f c0       	rjmp	.+30     	; 0xec2 <usbPoll+0x152>
 ea4:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <usbMsgFlags>
 ea8:	87 ff       	sbrs	r24, 7
 eaa:	0b c0       	rjmp	.+22     	; 0xec2 <usbPoll+0x152>
 eac:	ce 01       	movw	r24, r28
 eae:	90 de       	rcall	.-736    	; 0xbd0 <usbFunctionWrite>
 eb0:	8f 3f       	cpi	r24, 0xFF	; 255
 eb2:	21 f4       	brne	.+8      	; 0xebc <usbPoll+0x14c>
 eb4:	8e e1       	ldi	r24, 0x1E	; 30
 eb6:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <usbTxLen>
 eba:	03 c0       	rjmp	.+6      	; 0xec2 <usbPoll+0x152>
 ebc:	81 11       	cpse	r24, r1
 ebe:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
 ec2:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <usbRxLen>
 ec6:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <usbTxLen>
 eca:	84 ff       	sbrs	r24, 4
 ecc:	55 c0       	rjmp	.+170    	; 0xf78 <usbPoll+0x208>
 ece:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 ed2:	8f 3f       	cpi	r24, 0xFF	; 255
 ed4:	09 f4       	brne	.+2      	; 0xed8 <usbPoll+0x168>
 ed6:	50 c0       	rjmp	.+160    	; 0xf78 <usbPoll+0x208>
 ed8:	c8 2f       	mov	r28, r24
 eda:	89 30       	cpi	r24, 0x09	; 9
 edc:	08 f0       	brcs	.+2      	; 0xee0 <usbPoll+0x170>
 ede:	c8 e0       	ldi	r28, 0x08	; 8
 ee0:	8c 1b       	sub	r24, r28
 ee2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 ee6:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <usbTxBuf>
 eea:	88 e8       	ldi	r24, 0x88	; 136
 eec:	89 27       	eor	r24, r25
 eee:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <usbTxBuf>
 ef2:	cc 23       	and	r28, r28
 ef4:	09 f4       	brne	.+2      	; 0xef8 <usbPoll+0x188>
 ef6:	4b c0       	rjmp	.+150    	; 0xf8e <usbPoll+0x21e>
 ef8:	20 91 77 00 	lds	r18, 0x0077	; 0x800077 <usbMsgFlags>
 efc:	27 ff       	sbrs	r18, 7
 efe:	08 c0       	rjmp	.+16     	; 0xf10 <usbPoll+0x1a0>
 f00:	6c 2f       	mov	r22, r28
 f02:	81 e8       	ldi	r24, 0x81	; 129
 f04:	90 e0       	ldi	r25, 0x00	; 0
 f06:	f8 dd       	rcall	.-1040   	; 0xaf8 <usbFunctionRead>
 f08:	c8 2f       	mov	r28, r24
 f0a:	89 30       	cpi	r24, 0x09	; 9
 f0c:	78 f5       	brcc	.+94     	; 0xf6c <usbPoll+0x1fc>
 f0e:	23 c0       	rjmp	.+70     	; 0xf56 <usbPoll+0x1e6>
 f10:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <usbMsgPtr>
 f14:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <usbMsgPtr+0x1>
 f18:	26 ff       	sbrs	r18, 6
 f1a:	0a c0       	rjmp	.+20     	; 0xf30 <usbPoll+0x1c0>
 f1c:	a1 e8       	ldi	r26, 0x81	; 129
 f1e:	b0 e0       	ldi	r27, 0x00	; 0
 f20:	fc 01       	movw	r30, r24
 f22:	2c 2f       	mov	r18, r28
 f24:	34 91       	lpm	r19, Z
 f26:	3d 93       	st	X+, r19
 f28:	31 96       	adiw	r30, 0x01	; 1
 f2a:	21 50       	subi	r18, 0x01	; 1
 f2c:	d9 f7       	brne	.-10     	; 0xf24 <usbPoll+0x1b4>
 f2e:	08 c0       	rjmp	.+16     	; 0xf40 <usbPoll+0x1d0>
 f30:	dc 01       	movw	r26, r24
 f32:	e1 e8       	ldi	r30, 0x81	; 129
 f34:	f0 e0       	ldi	r31, 0x00	; 0
 f36:	2c 2f       	mov	r18, r28
 f38:	3d 91       	ld	r19, X+
 f3a:	31 93       	st	Z+, r19
 f3c:	21 50       	subi	r18, 0x01	; 1
 f3e:	e1 f7       	brne	.-8      	; 0xf38 <usbPoll+0x1c8>
 f40:	2f ef       	ldi	r18, 0xFF	; 255
 f42:	2c 0f       	add	r18, r28
 f44:	30 e0       	ldi	r19, 0x00	; 0
 f46:	2f 5f       	subi	r18, 0xFF	; 255
 f48:	3f 4f       	sbci	r19, 0xFF	; 255
 f4a:	82 0f       	add	r24, r18
 f4c:	93 1f       	adc	r25, r19
 f4e:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <usbMsgPtr+0x1>
 f52:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <usbMsgPtr>
 f56:	6c 2f       	mov	r22, r28
 f58:	81 e8       	ldi	r24, 0x81	; 129
 f5a:	90 e0       	ldi	r25, 0x00	; 0
 f5c:	27 d9       	rcall	.-3506   	; 0x1ac <usbCrc16Append>
 f5e:	cc 5f       	subi	r28, 0xFC	; 252
 f60:	cc 30       	cpi	r28, 0x0C	; 12
 f62:	41 f0       	breq	.+16     	; 0xf74 <usbPoll+0x204>
 f64:	8f ef       	ldi	r24, 0xFF	; 255
 f66:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 f6a:	04 c0       	rjmp	.+8      	; 0xf74 <usbPoll+0x204>
 f6c:	8f ef       	ldi	r24, 0xFF	; 255
 f6e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 f72:	ce e1       	ldi	r28, 0x1E	; 30
 f74:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <usbTxLen>
 f78:	84 e1       	ldi	r24, 0x14	; 20
 f7a:	96 b3       	in	r25, 0x16	; 22
 f7c:	93 70       	andi	r25, 0x03	; 3
 f7e:	69 f4       	brne	.+26     	; 0xf9a <usbPoll+0x22a>
 f80:	81 50       	subi	r24, 0x01	; 1
 f82:	d9 f7       	brne	.-10     	; 0xf7a <usbPoll+0x20a>
 f84:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <usbNewDeviceAddr>
 f88:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <usbDeviceAddr>
 f8c:	06 c0       	rjmp	.+12     	; 0xf9a <usbPoll+0x22a>
 f8e:	60 e0       	ldi	r22, 0x00	; 0
 f90:	81 e8       	ldi	r24, 0x81	; 129
 f92:	90 e0       	ldi	r25, 0x00	; 0
 f94:	0b d9       	rcall	.-3562   	; 0x1ac <usbCrc16Append>
 f96:	c4 e0       	ldi	r28, 0x04	; 4
 f98:	e5 cf       	rjmp	.-54     	; 0xf64 <usbPoll+0x1f4>
 f9a:	df 91       	pop	r29
 f9c:	cf 91       	pop	r28
 f9e:	08 95       	ret

00000fa0 <usbInit>:
 fa0:	85 b7       	in	r24, 0x35	; 53
 fa2:	83 60       	ori	r24, 0x03	; 3
 fa4:	85 bf       	out	0x35, r24	; 53
 fa6:	8b b7       	in	r24, 0x3b	; 59
 fa8:	80 64       	ori	r24, 0x40	; 64
 faa:	8b bf       	out	0x3b, r24	; 59
 fac:	08 95       	ret

00000fae <_exit>:
 fae:	f8 94       	cli

00000fb0 <__stop_program>:
 fb0:	ff cf       	rjmp	.-2      	; 0xfb0 <__stop_program>
